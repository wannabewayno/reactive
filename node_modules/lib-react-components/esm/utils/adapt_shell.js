var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { getDeviceInfo } from './device_info';

/**
 * Search and control elements class-es using data attributes.
 */

var AdaptShell = function () {
  /**
   * @param {HTMLElement} [root] - root where to search the elements, default: body
   */
  function AdaptShell(root) {
    _classCallCheck(this, AdaptShell);

    this.listener = this.onResize.bind(this);
    this.nodes = [];
    this.root = root || document.body;
    this.currentType = getDeviceInfo().type;
    window.addEventListener('resize', this.listener);
    this.searchForNodes();
    this.onResize();
  }

  _createClass(AdaptShell, [{
    key: 'searchForNodes',
    value: function searchForNodes() {
      var nodesMobile = this.root.querySelectorAll('[data-classnamemobile]');
      var nodesTablet = this.root.querySelectorAll('[data-classnametablet]');

      this.nodes = Array.prototype.slice.call(nodesMobile).concat(Array.prototype.slice.call(nodesTablet));
    }
  }, {
    key: 'processClasses',
    value: function processClasses() {
      for (var i = 0; i < this.nodes.length; i += 1) {
        if (this.nodes[i]) {
          if (this.currentType === 'mobile' && this.nodes[i].dataset.classnamemobile) {
            this.nodes[i].className = this.nodes[i].dataset.classnamemobile;
          } else if (this.currentType === 'tablet' && this.nodes[i].dataset.classnametablet) {
            this.nodes[i].className = this.nodes[i].dataset.classnametablet;
          } else {
            this.nodes[i].className = this.nodes[i].dataset.classnamedesktop;
          }
        }
      }
    }
  }, {
    key: 'onResize',
    value: function onResize() {
      var _getDeviceInfo = getDeviceInfo(),
          type = _getDeviceInfo.type;

      if (type !== this.currentType) {
        this.currentType = type;
        this.searchForNodes();
        this.processClasses();
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      window.removeEventListener('resize', this.listener);
      this.nodes = [];
    }
  }]);

  return AdaptShell;
}();

export default AdaptShell;
//# sourceMappingURL=adapt_shell.js.map