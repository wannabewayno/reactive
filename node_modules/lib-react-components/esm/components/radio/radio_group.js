var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent, Children, isValidElement, cloneElement } from 'react';
import PropTypes from 'prop-types';
import withAnalytics from '../../containers/analytics_hoc';

/**
 * RadioGroup component
 */

var RadioGroup = function (_PureComponent) {
  _inherits(RadioGroup, _PureComponent);

  function RadioGroup(props) {
    _classCallCheck(this, RadioGroup);

    var _this = _possibleConstructorReturn(this, (RadioGroup.__proto__ || Object.getPrototypeOf(RadioGroup)).call(this));

    _this.handleRadioChange = function (e, val) {
      var _this$props = _this.props,
          value = _this$props.value,
          onChange = _this$props.onChange;


      if (onChange) onChange(e, val);

      if (!value) {
        _this.setState({
          valueState: val
        });
      }
    };

    _this.state = {
      valueState: props.value || props.defaultValue
    };
    return _this;
  }

  _createClass(RadioGroup, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var value = this.props.value;


      if (value !== nextProps.value) {
        this.setState({
          valueState: nextProps.value
        });
      }
    }

    /**
     * Handler for radio change event
     * @param {SytheticEvent} e
     * @param {string} val
     */

  }, {
    key: 'render',


    /**
     * render
     * @return {ReactElement} markup
     */
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          name = _props.name,
          defaultValue = _props.defaultValue,
          value = _props.value,
          onChange = _props.onChange,
          other = _objectWithoutProperties(_props, ['children', 'name', 'defaultValue', 'value', 'onChange']);

      var valueState = this.state.valueState;


      return React.createElement(
        'div',
        other,
        Children.map(children, function (child, index) {
          if (!isValidElement(child)) {
            return null;
          }

          return cloneElement(child, {
            key: index,
            name: name,
            checked: valueState === child.props.value,
            onChange: _this2.handleRadioChange
          });
        })
      );
    }
  }]);

  return RadioGroup;
}(PureComponent);

RadioGroup.propTypes = {
  /**
   * The content of the component
   */
  children: PropTypes.node.isRequired,
  /**
   * The name used to reference the value of the control
   */
  name: PropTypes.string.isRequired,
  /**
   * The `value` property of the radio button that will be
   * selected by default. This takes precedence over the `checked` property
   * of the `Radio` elements
   */
  defaultValue: PropTypes.string,
  /**
   * Value of the selected radio button
   */
  value: PropTypes.string,
  /**
   * Change callback
   */
  onChange: PropTypes.func
};
RadioGroup.defaultProps = {
  defaultValue: '',
  value: '',
  onChange: function onChange() {}
};


export default withAnalytics(RadioGroup, 'onChange');
//# sourceMappingURL=radio_group.js.map