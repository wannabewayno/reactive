var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, Children, cloneElement, isValidElement } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import SelectDropdown from './select_dropdown';
import withAnalytics from '../../containers/analytics_hoc';
import SelectArrowIcon from '../icons/select_arrow';

function prepareValue(value, defaultValue) {
  if (value || typeof value === 'number') {
    return value;
  }

  if (defaultValue || typeof defaultValue === 'number') {
    return defaultValue;
  }

  return '';
}

/**
 * Select component
 */

var Select = function (_Component) {
  _inherits(Select, _Component);

  function Select() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Select);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Select.__proto__ || Object.getPrototypeOf(Select)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      open: false,
      value: prepareValue(_this.props.value, _this.props.defaultValue),
      valueSelected: null
    }, _this.getValue = function () {
      return _this.inputNode.value;
    }, _this.setValue = function (value) {
      return _this.setState({
        value: value
      });
    }, _this._blurTimeout = null, _this._childrenValues = [], _this.inputNode = null, _this.dropdownNode = null, _this._handleItemClick = function (child) {
      return function (e) {
        var _this$props = _this.props,
            onChange = _this$props.onChange,
            name = _this$props.name,
            value = _this$props.value;

        var valueChild = child.props.value;

        if (value || value === valueChild) {
          _this.setState({
            open: false
          });

          if (value === valueChild) return;
        } else {
          _this.setState({
            value: valueChild,
            open: false
          });
        }

        onChange(e, valueChild, name);
      };
    }, _this._handleClick = function () {
      var disabled = _this.props.disabled;
      var open = _this.state.open;


      if (disabled) return;

      if (open) {
        _this.setState({
          open: false
        });
      } else {
        _this.setState({
          open: true
        }, _this._handleItemHovered);
      }
    }, _this._handleFocus = function (e) {
      var _this$props2 = _this.props,
          onFocus = _this$props2.onFocus,
          name = _this$props2.name;


      clearTimeout(_this._blurTimeout);
      onFocus(e, name);
    }, _this._handleBlur = function (e) {
      var _this$props3 = _this.props,
          onBlur = _this$props3.onBlur,
          name = _this$props3.name;


      clearTimeout(_this._blurTimeout);
      _this._blurTimeout = setTimeout(_this.setState.bind(_this, { open: false }), 0);
      onBlur(e, name);
    }, _this._handleKeyDown = function (event) {
      var _this$props4 = _this.props,
          onKeyDown = _this$props4.onKeyDown,
          disabled = _this$props4.disabled,
          name = _this$props4.name;


      if (!disabled) {
        var keyCode = event.keyCode;

        /**
         * escape key press
         * hide dropdown list
         */

        if (keyCode === 27) {
          _this.setState({
            open: false
          });
        }

        /**
         * space or enter key press
         * open/hide dropdown or select element in dropdown list
         */
        if (keyCode === 32 || keyCode === 13) {
          event.preventDefault();
          _this._handleSpaceEnterPress(event);
        }

        /**
         * up key press
         * select prev element in dropdown list
         */
        if (keyCode === 38) {
          event.preventDefault();
          _this._handleItemHovered('up');
        }

        /**
         * down key press
         * select next element in dropdown list
         */
        if (keyCode === 40) {
          event.preventDefault();
          _this._handleItemHovered('down');
        }
      }

      onKeyDown(event, name);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Select, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var value = this.props.value;


      if (value !== nextProps.value) {
        this.setState({
          value: nextProps.value
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearTimeout(this._blurTimeout);
    }

    /**
     * Get select value
     * @return {string|number}
     */


    /**
     * Set select value
     * @param {string|number} value
     */


    /**
     * onClick select item handler
     * @param {object} child
     */


    /**
     * onClick select handler
     */


    /**
     * onFocus select handler
     * @param {SytheticEvent} e
     */


    /**
     * onBlur select handler
     * @param {SytheticEvent} e
     */

  }, {
    key: '_handleSpaceEnterPress',


    /**
     * onSpaceEnterPress select handler
     * @param {SytheticEvent} e
     */
    value: function _handleSpaceEnterPress(e) {
      var _props = this.props,
          value = _props.value,
          name = _props.name,
          onChange = _props.onChange;
      var _state = this.state,
          valueSelected = _state.valueSelected,
          open = _state.open;


      if (open && valueSelected && !value) {
        this.setState({
          value: valueSelected
        });
      }

      if (open && valueSelected) {
        onChange(e, valueSelected, name);
      }

      this._handleClick();
    }

    /**
     * onKeyDown select handler
     * @param {SytheticEvent} e
     */

  }, {
    key: '_handleItemHovered',


    /**
     * onSelectItemFocus handler
     * @param {string|undefined} type
     */
    value: function _handleItemHovered(type) {
      var _state2 = this.state,
          valueSelected = _state2.valueSelected,
          open = _state2.open,
          value = _state2.value;
      var _childrenValues = this._childrenValues;


      if (!open) return;

      if (!type) {
        if (value) {
          this.setState({
            valueSelected: value
          }, this._handleScrollToElement);
        } else {
          this.setState({
            valueSelected: _childrenValues[0]
          }, this._handleScrollToElement);
        }

        return;
      }

      var valueIndex = _childrenValues.indexOf(valueSelected);
      var prevValue = _childrenValues[valueIndex - 1];
      var nextValue = _childrenValues[valueIndex + 1];

      if (type === 'up' && prevValue) {
        this.setState({
          valueSelected: prevValue
        }, this._handleScrollToElement);
      }

      if (type === 'down' && nextValue) {
        this.setState({
          valueSelected: nextValue
        }, this._handleScrollToElement);
      }
    }

    /**
     * Scroll to focused element
     */

  }, {
    key: '_handleScrollToElement',
    value: function _handleScrollToElement() {
      if (this.dropdownNode) {
        this.dropdownNode.scrollToFocusedElement();
      }
    }

    /**
     * Render open button
     * @return {ReactElement} markup
     */

  }, {
    key: '_renderOpenButton',
    value: function _renderOpenButton() {
      var arrowComponent = this.props.arrowComponent;


      return React.createElement(
        'div',
        { className: 'select_open_button' },
        arrowComponent || React.createElement(SelectArrowIcon, { className: 'select_arrow_icon' })
      );
    }

    /**
     * render
     * @return {ReactElement} markup
     */

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this,
          _classNames2,
          _classNames3;

      var _props2 = this.props,
          native = _props2.native,
          children = _props2.children,
          name = _props2.name,
          disabled = _props2.disabled,
          value = _props2.value,
          defaultValue = _props2.defaultValue,
          _onChange = _props2.onChange,
          _onFocus = _props2.onFocus,
          _onBlur = _props2.onBlur,
          _onKeyDown = _props2.onKeyDown,
          multiple = _props2.multiple,
          tabIndex = _props2.tabIndex,
          className = _props2.className,
          placeholder = _props2.placeholder,
          inputProps = _props2.inputProps,
          arrowComponent = _props2.arrowComponent,
          bgType = _props2.bgType,
          color = _props2.color,
          textColor = _props2.textColor,
          colorFocus = _props2.colorFocus,
          propsSize = _props2.size,
          mobileSize = _props2.mobileSize,
          placement = _props2.placement,
          placeholderColor = _props2.placeholderColor,
          other = _objectWithoutProperties(_props2, ['native', 'children', 'name', 'disabled', 'value', 'defaultValue', 'onChange', 'onFocus', 'onBlur', 'onKeyDown', 'multiple', 'tabIndex', 'className', 'placeholder', 'inputProps', 'arrowComponent', 'bgType', 'color', 'textColor', 'colorFocus', 'size', 'mobileSize', 'placement', 'placeholderColor']);

      var _state3 = this.state,
          open = _state3.open,
          valueState = _state3.value,
          valueSelected = _state3.valueSelected;
      var device = this.context.device;


      var size = propsSize || Select.defaultProps.size;

      if (device && mobileSize) {
        if (device.type === 'mobile') {
          size = mobileSize;
        }
      }

      if (native) {
        var _classNames;

        return React.createElement(
          'div',
          _extends({
            'data-component': 'select',
            'data-type': bgType,
            'data-disabled': disabled,
            className: classNames('select', className)
          }, other),
          React.createElement(
            'select',
            _extends({
              'data-component': 'select_field'
            }, inputProps, {
              tabIndex: tabIndex,
              multiple: false,
              className: classNames('select_field', 'round_small', ['select_field_' + size], ['select_field_focus_' + colorFocus], ['stroke_' + color], (_classNames = {}, _defineProperty(_classNames, 'fill_' + color, bgType === 'fill'), _defineProperty(_classNames, 'fill_white', bgType === 'stroke'), _classNames)),
              name: name,
              disabled: disabled,
              ref: function ref(node) {
                _this2.inputNode = node;
              },
              value: value,
              defaultValue: defaultValue,
              onChange: function onChange(e) {
                _onChange(e, e.target.value, name);
              },
              onFocus: function onFocus(e) {
                _onFocus(e, name);
              },
              onBlur: function onBlur(e) {
                _onBlur(e, name);
              },
              onKeyDown: function onKeyDown(e) {
                _onKeyDown(e, name);
              }
            }),
            children
          ),
          this._renderOpenButton()
        );
      }

      this._childrenValues = [];
      var displayValue = placeholder;

      var options = Children.map(children, function (child) {
        if (!isValidElement(child)) {
          return null;
        }

        var _child$props = child.props,
            valueChild = _child$props.value,
            childrenChild = _child$props.children,
            disabledChild = _child$props.disabled;

        var selected = valueState === valueChild;

        if (selected) {
          displayValue = childrenChild;
        }

        if (!disabledChild) {
          _this2._childrenValues.push(valueChild);
        }

        return cloneElement(child, {
          onClick: disabledChild ? null : _this2._handleItemClick(child),
          selected: selected,
          hasFocus: valueSelected === valueChild,
          size: size,
          textColor: textColor,
          colorFocus: colorFocus
        });
      });
      var mustOpen = open && options && options.length > 0;

      return React.createElement(
        'div',
        _extends({
          'data-component': 'select',
          'data-type': bgType,
          'data-disabled': disabled,
          'data-open': mustOpen,
          'data-placement': placement,
          className: classNames('select', className),
          onFocus: this._handleFocus,
          onBlur: this._handleBlur,
          onKeyDown: this._handleKeyDown
        }, other, Object.assign(disabled ? {} : {
          tabIndex: tabIndex
        })),
        React.createElement(
          'div',
          {
            'data-component': 'select_field',
            className: classNames('select_field', 'truncate_text', 'round_small', ['select_field_' + size], ['select_field_focus_' + colorFocus], ['stroke_' + color], (_classNames2 = {}, _defineProperty(_classNames2, 'fill_' + color, bgType === 'fill'), _defineProperty(_classNames2, 'fill_white', bgType === 'stroke'), _classNames2)),
            onClick: this._handleClick
          },
          React.createElement(
            'span',
            {
              className: classNames((_classNames3 = {}, _defineProperty(_classNames3, 'text_' + textColor, valueState), _defineProperty(_classNames3, 'text_' + placeholderColor, !valueState), _classNames3))
            },
            displayValue
          )
        ),
        React.createElement('input', _extends({}, inputProps, {
          type: 'hidden',
          value: valueState,
          name: name,
          ref: function ref(node) {
            _this2.inputNode = node;
          },
          disabled: disabled
        })),
        this._renderOpenButton(),
        options && options.length > 0 && React.createElement(
          SelectDropdown,
          {
            className: 'select_dropdown',
            ref: function ref(node) {
              _this2.dropdownNode = node;
            },
            bgType: bgType,
            color: color,
            colorFocus: colorFocus
          },
          options
        )
      );
    }
  }]);

  return Select;
}(Component);

Select.propTypes = {
  /**
   * The option elements to populate the select with.
   */
  children: PropTypes.node.isRequired,
  /**
   * If true, the component will be using a native select element.
   */
  native: PropTypes.bool,
  /**
   * The input/select name value.
   */
  name: PropTypes.string,
  /**
   * If true, the select will be disabled.
   */
  disabled: PropTypes.bool,
  /**
   * The input/select value.
   */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * The input/select default value.
   */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Callback function fired when a menu item is selected.
   */
  onChange: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  onKeyDown: PropTypes.func,
  /**
   * Element tabIndex.
   */
  tabIndex: PropTypes.number,
  /**
   * Classname for the root element.
   */
  className: PropTypes.string,
  /**
   * The short hint displayed in the input before
   * the user enters a value (only for `native: false`)
   */
  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Color for placeholder
   */
  placeholderColor: PropTypes.string,
  /**
   * Properties applied to the input/select element.
   */
  inputProps: PropTypes.oneOfType([PropTypes.object]),
  arrowComponent: PropTypes.node,
  /**
   * Component type one of `fill` or `stroke`.
   * If `fill` - component will be have background-color from `color` props.
   * If `stroke` - component will be have border-color from `color` props.
   */
  bgType: PropTypes.oneOf(['fill', 'stroke']),
  /**
   * Component color from theme.
   */
  color: PropTypes.string,
  /**
   * Component text color from theme.
   */
  textColor: PropTypes.string,
  /**
   * Component focus color from theme.
   */
  colorFocus: PropTypes.string,
  /**
   * Component size.
   */
  size: PropTypes.oneOf(['medium', 'large']),
  /**
   * Component size for mobile.
   */
  mobileSize: PropTypes.oneOf(['medium', 'large']),
  /**
   * Select dropdown opened place
   */
  placement: PropTypes.oneOf(['top', 'bottom'])
};
Select.contextTypes = {
  device: PropTypes.object
};
Select.defaultProps = {
  native: false,
  name: undefined,
  disabled: false,
  value: undefined,
  defaultValue: undefined,
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onKeyDown: function onKeyDown() {},

  tabIndex: 0,
  className: '',
  placeholder: undefined,
  placeholderColor: 'grey_4',
  inputProps: {},
  arrowComponent: null,
  bgType: 'fill',
  color: 'light_grey',
  textColor: 'black',
  colorFocus: 'primary',
  size: 'medium',
  mobileSize: undefined,
  placement: 'bottom'
};


export default withAnalytics(Select, 'onChange');
//# sourceMappingURL=select.js.map