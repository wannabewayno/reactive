{"version":3,"sources":["../../../src/components/typography/index.jsx"],"names":["React","PropTypes","classNames","textTypePropType","oneOfType","oneOf","string","Typography","props","context","children","propsType","type","color","align","tabletType","mobileType","className","other","device","basicClassNames","Component","test","propTypes","node","isRequired","contextTypes","object","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,OAAO,IAAMC,mBAAmBF,UAAUG,SAAV,CAAoB,CAClDH,UAAUI,KAAV,CAAgB,CACd,IADc,EAEd,IAFc,EAGd,IAHc,EAId,IAJc,EAKd,IALc,EAMd,IANc,EAOd,IAPc,EAQd,IARc,EASd,IATc,EAUd,IAVc,EAWd,EAXc,CAAhB,CADkD,EAclDJ,UAAUK,MAdwC,CAApB,CAAzB;;AAiBP;;;AAGA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC;AAAA,MAE/CC,QAF+C,GAU7CF,KAV6C,CAE/CE,QAF+C;AAAA,MAGzCC,SAHyC,GAU7CH,KAV6C,CAG/CI,IAH+C;AAAA,MAI/CC,KAJ+C,GAU7CL,KAV6C,CAI/CK,KAJ+C;AAAA,MAK/CC,KAL+C,GAU7CN,KAV6C,CAK/CM,KAL+C;AAAA,MAM/CC,UAN+C,GAU7CP,KAV6C,CAM/CO,UAN+C;AAAA,MAO/CC,UAP+C,GAU7CR,KAV6C,CAO/CQ,UAP+C;AAAA,MAQ/CC,SAR+C,GAU7CT,KAV6C,CAQ/CS,SAR+C;AAAA,MAS5CC,KAT4C,4BAU7CV,KAV6C;;AAAA,MAWzCW,MAXyC,GAW9BV,OAX8B,CAWzCU,MAXyC;;AAYjD,MAAIP,OAAOD,aAAa,IAAxB;;AAEA,MAAIQ,MAAJ,EAAY;AACV,QAAIH,cAAcG,OAAOP,IAAP,KAAgB,QAAlC,EAA4C;AAC1CA,aAAOI,UAAP;AACD;;AAED,QAAID,cAAcI,OAAOP,IAAP,KAAgB,QAAlC,EAA4C;AAC1CA,aAAOG,UAAP;AACD;AACF;;AAED,MAAMK,kBAAkBlB,WACtB,YADsB,EAEtB,WAASW,KAAT,CAFsB,gCAGXC,KAHW,EAGDA,UAAU,MAHT,GAItBG,SAJsB,CAAxB;AAMA,MAAMI,YAAY,SAASC,IAAT,CAAcV,IAAd,IAAsBA,IAAtB,GAA6B,GAA/C;;AAEA,SACE;AAAC,aAAD;AAAA,iBACMM,KADN;AAEE,wBAAe,YAFjB;AAGE,8BAAsBF,aAAad,WAAWkB,eAAX,EAA4BJ,UAA5B,CAAb,GAAuD,IAH/E;AAIE,8BAAsBD,aAAab,WAAWkB,eAAX,EAA4BL,UAA5B,CAAb,GAAuD,IAJ/E;AAKE,+BAAwBC,cAAcD,UAAf,GAA6BK,eAA7B,GAA+C,IALxE;AAME,iBAAWlB,WACTkB,eADS,EAETR,IAFS;AANb;AAWGF;AAXH,GADF;AAeD;;AAEDH,WAAWgB,SAAX,GAAuB;AACrB;;;AAGAb,YAAUT,UAAUuB,IAAV,CAAeC,UAJJ;AAKrB;;;AAGAb,QAAMT,gBARe;AASrB;;;AAGAY,cAAYZ,gBAZS;AAarB;;;AAGAa,cAAYb,gBAhBS;AAiBrB;;;AAGAU,SAAOZ,UAAUK,MApBI;AAqBrB;;;AAGAQ,SAAOb,UAAUI,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,EAA4B,MAA5B,CAAhB,CAxBc;AAyBrB;;;AAGAY,aAAWhB,UAAUK;AA5BA,CAAvB;;AA+BAC,WAAWmB,YAAX,GAA0B;AACxBP,UAAQlB,UAAU0B;AADM,CAA1B;;AAIApB,WAAWqB,YAAX,GAA0B;AACxBhB,QAAM,IADkB;AAExBC,SAAO,OAFiB;AAGxBC,SAAO,MAHiB;AAIxBG,aAAW,EAJa;AAKxBF,cAAY,EALY;AAMxBC,cAAY;AANY,CAA1B","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const textTypePropType = PropTypes.oneOfType([\n  PropTypes.oneOf([\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'b1',\n    'b2',\n    'b3',\n    'c1',\n    '',\n  ]),\n  PropTypes.string,\n]);\n\n/**\n * Typography component\n */\nexport default function Typography(props, context) {\n  const {\n    children,\n    type: propsType,\n    color,\n    align,\n    tabletType,\n    mobileType,\n    className,\n    ...other\n  } = props;\n  const { device } = context;\n  let type = propsType || 'c1';\n\n  if (device) {\n    if (mobileType && device.type === 'mobile') {\n      type = mobileType;\n    }\n\n    if (tabletType && device.type === 'tablet') {\n      type = tabletType;\n    }\n  }\n\n  const basicClassNames = classNames(\n    'break_word',\n    [`text_${color}`],\n    { [`text_${align}`]: align !== 'auto' },\n    className,\n  );\n  const Component = /h[1-6]/.test(type) ? type : 'p';\n\n  return (\n    <Component\n      {...other}\n      data-component=\"typography\"\n      data-classnamemobile={mobileType ? classNames(basicClassNames, mobileType) : null}\n      data-classnametablet={tabletType ? classNames(basicClassNames, tabletType) : null}\n      data-classnamedesktop={(mobileType || tabletType) ? basicClassNames : null}\n      className={classNames(\n        basicClassNames,\n        type,\n      )}\n    >\n      {children}\n    </Component>\n  );\n}\n\nTypography.propTypes = {\n  /**\n   * This is what will be displayed inside the button\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Typography type\n   */\n  type: textTypePropType,\n  /**\n   * Typography type for tablet\n   */\n  tabletType: textTypePropType,\n  /**\n   * Typography type for mobile\n   */\n  mobileType: textTypePropType,\n  /**\n   * Component color from theme\n   */\n  color: PropTypes.string,\n  /**\n   * Component content aligment\n   */\n  align: PropTypes.oneOf(['left', 'center', 'right', 'auto']),\n  /**\n   * The CSS class name of the root element\n   */\n  className: PropTypes.string,\n};\n\nTypography.contextTypes = {\n  device: PropTypes.object,\n};\n\nTypography.defaultProps = {\n  type: 'b1',\n  color: 'black',\n  align: 'left',\n  className: '',\n  tabletType: '',\n  mobileType: '',\n};\n"]}