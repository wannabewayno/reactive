{"version":3,"sources":["../../../src/components/snackbar/index.jsx"],"names":["React","PureComponent","PropTypes","classNames","Snackbar","state","open","exiting","timerAutoHide","rootNode","_handleMouseEnter","event","onMouseEnter","props","_handlePause","_handleMouseLeave","onMouseLeave","_handleResume","clearTimeout","autoHideDuration","_setAutoHideTimer","_handleTransitionEnd","e","preventDefault","target","currentTarget","setState","prevProps","setTimeout","duration","onClose","children","className","openProp","fullWidth","verticalPosition","horizontalPosition","action","color","textColor","other","snackbar_full_width","snackbar_open","propTypes","number","node","isRequired","string","func","bool","oneOf","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n/**\n * Snackbar component\n */\nexport default class Snackbar extends PureComponent {\n  static propTypes = {\n    /**\n     * The number of milliseconds to wait before automatically calling\n     * the onClose function. onClose should then set the state of\n     * the open prop to hide the Snackbar. This behavior is disabled by\n     * default with the null value.\n     */\n    autoHideDuration: PropTypes.number,\n    /**\n     * This is what will be displayed inside the Snackbar.\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * The CSS class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Callback fired when the component requests to be closed.\n     */\n    onClose: PropTypes.func,\n    /**\n     * Callback function fired when the component mouse leave.\n     */\n    onMouseLeave: PropTypes.func,\n    /**\n     * Callback function fired when the component mouse enter.\n     */\n    onMouseEnter: PropTypes.func,\n    /**\n     * If true, Snackbar is open.\n     */\n    open: PropTypes.bool,\n    /**\n     * If true, Snackbar has `width: 100%`.\n     */\n    fullWidth: PropTypes.bool,\n    /**\n     * Vertical position for Snackbar.\n     */\n    verticalPosition: PropTypes.oneOf(['top', 'bottom']),\n    /**\n     * Horizontal position for Snackbar.\n     */\n    horizontalPosition: PropTypes.oneOf(['left', 'center', 'right']),\n    /**\n     * The action to display.\n     */\n    action: PropTypes.node,\n    /**\n     * Component color from theme.\n     */\n    color: PropTypes.string,\n    /**\n     * Component text color from theme.\n     */\n    textColor: PropTypes.string,\n  };\n\n  static defaultProps = {\n    autoHideDuration: undefined,\n    className: undefined,\n    onClose() {},\n    onMouseLeave() {},\n    onMouseEnter() {},\n    open: false,\n    fullWidth: true,\n    verticalPosition: 'bottom',\n    horizontalPosition: 'left',\n    action: null,\n    color: 'black',\n    textColor: 'white',\n  };\n\n  state = {\n    open: false,\n    exiting: true,\n  };\n\n  componentDidMount() {\n    const { open } = this.props;\n\n    if (open) {\n      this._setAutoHideTimer();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { open } = this.props;\n\n    if (prevProps.open !== open) {\n      if (open) {\n        this.setState({ // eslint-disable-line\n          exiting: false,\n        }, () => {\n          setTimeout(() => {\n            this.setState({\n              open: true,\n            });\n          }, 10);\n        });\n\n        this._setAutoHideTimer();\n      } else {\n        clearTimeout(this.timerAutoHide);\n\n        this.setState({ // eslint-disable-line\n          open: false,\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timerAutoHide);\n  }\n\n  /**\n   * Set timer for fire onClose callback\n   * @param {number} duration\n   */\n  _setAutoHideTimer(duration = null) {\n    const { onClose, autoHideDuration } = this.props;\n\n    if (!onClose || !autoHideDuration) {\n      return;\n    }\n\n    clearTimeout(this.timerAutoHide);\n\n    this.timerAutoHide = setTimeout(() => {\n      if (!onClose || !autoHideDuration) {\n        return;\n      }\n\n      onClose(null, 'timeout');\n    }, duration || autoHideDuration || 0);\n  }\n\n  timerAutoHide = null;\n  rootNode = null;\n\n  /**\n   * Handler for onMouseEnter event\n   */\n  _handleMouseEnter = (event) => {\n    const { onMouseEnter } = this.props;\n\n    if (onMouseEnter) {\n      onMouseEnter(event);\n    }\n\n    this._handlePause();\n  };\n\n  /**\n   * Handler for onMouseLeave event\n   */\n  _handleMouseLeave = (event) => {\n    const { onMouseLeave } = this.props;\n\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    this._handleResume();\n  };\n\n  /**\n   * Stop auto hide timer\n   */\n  _handlePause = () => {\n    clearTimeout(this.timerAutoHide);\n  };\n\n  /**\n   * Start auto hide timer\n   */\n  _handleResume = () => {\n    const { autoHideDuration } = this.props;\n\n    if (autoHideDuration) {\n      this._setAutoHideTimer((autoHideDuration || 0) * 0.5);\n    }\n  };\n\n  /**\n   * Handler for onTransitionEnd event\n   */\n  _handleTransitionEnd = (e) => {\n    e.preventDefault();\n\n    const { open } = this.state;\n\n    if (e.target === e.currentTarget && !open) {\n      this.setState({\n        exiting: true,\n      });\n    }\n  }\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const {\n      autoHideDuration,\n      children,\n      className,\n      onClose,\n      onMouseLeave,\n      onMouseEnter,\n      open: openProp,\n      fullWidth,\n      verticalPosition,\n      horizontalPosition,\n      action,\n      color,\n      textColor,\n      ...other\n    } = this.props;\n    const { exiting, open } = this.state;\n\n    if (exiting) {\n      return null;\n    }\n\n    return (\n      <div\n        data-component=\"snackbar\"\n        className={classNames(\n          'snackbar',\n          [`snackbar_vertical_position_${verticalPosition}`],\n          [`snackbar_horizontal_position_${horizontalPosition}`],\n          {\n            snackbar_full_width: fullWidth,\n          },\n          className,\n        )}\n        onMouseEnter={this._handleMouseEnter}\n        onMouseLeave={this._handleMouseLeave}\n        {...other}\n      >\n        <div\n          className={classNames(\n            'snackbar_container',\n            {\n              snackbar_open: open,\n            },\n            [`fill_${color}`],\n          )}\n          onTransitionEnd={this._handleTransitionEnd}\n        >\n          <div\n            className={classNames(\n              'snackbar_content',\n              'break_word',\n              [`text_${textColor}`],\n            )}\n          >\n            {children}\n          </div>\n          {action && (\n            <div className=\"snackbar_action\">\n              {action}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"]}