var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import withAnalytics from '../../containers/analytics_hoc';
import SwitchHandler from '../switch_handler';
import CheckmarkIcon from '../icons/checkmark';

/**
 * Checkbox component
 */

var Checkbox = function (_SwitchHandler) {
  _inherits(Checkbox, _SwitchHandler);

  function Checkbox() {
    _classCallCheck(this, Checkbox);

    return _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).apply(this, arguments));
  }

  _createClass(Checkbox, [{
    key: 'render',

    /**
     * render
     * @return {ReactElement} markup
     */

    value: function render() {
      var _classnames, _classnames2;

      var _props = this.props,
          name = _props.name,
          defaultChecked = _props.defaultChecked,
          disabled = _props.disabled,
          onCheck = _props.onCheck,
          checked = _props.checked,
          inputProps = _props.inputProps,
          label = _props.label,
          labelPosition = _props.labelPosition,
          labelProps = _props.labelProps,
          className = _props.className,
          tabIndex = _props.tabIndex,
          bgType = _props.bgType,
          color = _props.color,
          colorOn = _props.colorOn,
          iconColor = _props.iconColor,
          iconColorOn = _props.iconColorOn,
          iconType = _props.iconType,
          other = _objectWithoutProperties(_props, ['name', 'defaultChecked', 'disabled', 'onCheck', 'checked', 'inputProps', 'label', 'labelPosition', 'labelProps', 'className', 'tabIndex', 'bgType', 'color', 'colorOn', 'iconColor', 'iconColorOn', 'iconType']);

      var checkedState = this.state.checkedState;


      return React.createElement(
        'div',
        _extends({
          'data-component': 'checkbox',
          'data-type': bgType,
          'data-checked': checkedState,
          'data-disabled': disabled,
          className: classnames('checkbox', className)
        }, other),
        React.createElement('input', _extends({}, inputProps, {
          tabIndex: tabIndex,
          type: 'checkbox',
          className: 'checkbox_input',
          onChange: this.onChange,
          disabled: disabled,
          checked: checkedState,
          name: name
        })),
        labelPosition === 'left' ? this.renderLabel() : null,
        React.createElement(
          'div',
          {
            className: classnames('checkbox_container', (_classnames = {}, _defineProperty(_classnames, 'stroke_' + color, !checkedState), _defineProperty(_classnames, 'fill_' + color, !checkedState), _classnames), (_classnames2 = {}, _defineProperty(_classnames2, 'stroke_' + colorOn, checkedState), _defineProperty(_classnames2, 'fill_' + colorOn, checkedState), _classnames2)),
            'data-component': 'checkbox_container'
          },
          iconType === 'square' ? React.createElement('div', {
            className: classnames('checkbox_icon_square', _defineProperty({}, 'fill_' + iconColor, !checkedState), _defineProperty({}, 'fill_' + iconColorOn, checkedState))
          }) : React.createElement(CheckmarkIcon, {
            className: classnames('checkbox_icon_checkmark', _defineProperty({}, 'fill_' + iconColor, !checkedState), _defineProperty({}, 'fill_' + iconColorOn, checkedState))
          })
        ),
        labelPosition === 'right' ? this.renderLabel() : null
      );
    }
  }]);

  return Checkbox;
}(SwitchHandler);

Checkbox.propTypes = _extends({}, SwitchHandler.propTypes, {
  iconType: PropTypes.string
});
Checkbox.defaultProps = _extends({}, SwitchHandler.defaultProps, {
  iconType: 'checkmark'
});


export default withAnalytics(Checkbox, 'onCheck');
//# sourceMappingURL=index.js.map