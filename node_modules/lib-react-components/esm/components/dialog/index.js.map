{"version":3,"sources":["../../../src/components/dialog/index.jsx"],"names":["React","PureComponent","PropTypes","classNames","Button","s","Dialog","onEscapePress","e","onClose","props","keyCode","document","addEventListener","removeEventListener","cancelText","cancelButtonProps","onCancel","button","acceptText","acceptButtonProps","onAccept","swapButtons","buttons","renderCancelButton","renderAcceptButton","title","children","className","classNameOverlay","classNameDialog","smooth","other","c_dialog_wrapper","m_smooth","overlay","container","dialog","content","renderButtons","propTypes","oneOfType","number","string","node","object","bool","func","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '../button';\n// import s from './styles/index.sss';\n\nconst s = {};\n\n/**\n * @class Dialog - Dialog component\n * @example\n *  // Basic usage\n *  import Dialog from './path/to/dialog';\n *\n *  const DialogExample = () => (\n *    <Dialog\n *      title=\"Dialog title\"\n *    />\n *  );\n *\n * @example\n *  // With content\n *  import Dialog from './path/to/dialog';\n *\n *  const DialogExample = () => (\n *    <Dialog\n *      title=\"Dialog title\"\n *    >\n *      Dialog description\n *    </Dialog>\n *  );\n *\n * @example\n *  // Change buttons text\n *  import Dialog from './path/to/dialog';\n *\n *  const DialogExample = () => (\n *    <Dialog\n *      title=\"Dialog title\"\n *      cancelText=\"Disagree\"\n *      acceptText=\"Agree\"\n *    />\n *  );\n *\n * @example\n *  // Change buttons props\n *  import Dialog from './path/to/dialog';\n *\n *  const DialogExample = () => (\n *    <Dialog\n *      title=\"Dialog title\"\n *      cancelButtonProps={{\n *        style: {\n *          opacity: '0.7',\n *        },\n *      }}\n *      acceptButtonProps={{\n *        style: {\n *          opacity: '0.8',\n *        },\n *      }}\n *    />\n *  );\n *\n * @example\n *  // Buttons swap\n *  import Dialog from './path/to/dialog';\n *\n *  const DialogExample = () => (\n *    <Dialog\n *      title=\"Dialog title\"\n *      swapButtons\n *    />\n *  );\n *\n * @example\n *  // With classNames\n *  import Dialog from './path/to/dialog';\n *\n *  const DialogExample = () => (\n *    <Dialog\n *      title=\"Dialog title\"\n *      className=\"my-wrapper-class\"\n *      classNameOverlay=\"my-overlay-class\"\n *      classNameDialog=\"my-dialog-class\"\n *    />\n *  );\n *\n * @example\n *  // With events\n *  import Dialog from './path/to/dialog';\n *\n *  const DialogExample = () => (\n *    <Dialog\n *      title=\"Dialog title\"\n *      onCancel={(e) => { console.log(e); }}\n *      onAccept={(e) => { console.log(e); }}\n *      onClose={(e) => { console.log(e); }}\n *    />\n *  );\n *\n * @example\n *  // With not documented props\n *  import Dialog from './path/to/dialog';\n *\n *  const DialogExample = () => (\n *    <Dialog\n *      title=\"Dialog title\"\n *      style={{\n *        height: '500px',\n *      }}\n *    />\n *  );\n */\nexport default class Dialog extends PureComponent {\n  /**\n   * PropTypes\n   * @type {{\n   *  title: string\n   *  children: array\n   *  cancelText: array\n   *  cancelButtonProps: object\n   *  acceptText: array\n   *  acceptButtonProps: object\n   *  swapButtons: boolean\n   *  className: string\n   *  classNameOverlay: string\n   *  classNameDialog: string\n   *  smooth: boolean\n   *  onCancel: function\n   *  onAccept: function\n   *  onClose: function\n   * }}\n   */\n  static propTypes = {\n    /**\n     * The title to display on the Dialog. Could be number, string, element\n     * or an array containing these types\n     */\n    title: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.node,\n    ]),\n    /**\n     * The contents of the Dialog\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.node,\n    ]),\n    /**\n     * The value to display on the Dialog cancel button. Could be number, string, element\n     * or an array containing these types\n     */\n    cancelText: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.node,\n    ]),\n    /**\n     * The cancel button props\n     */\n    cancelButtonProps: PropTypes.oneOfType([\n      PropTypes.object,\n    ]),\n    /**\n     * The value to display on the Dialog accept button. Could be number, string, element\n     * or an array containing these types\n     */\n    acceptText: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.node,\n    ]),\n    /**\n     * The accept button props\n     */\n    acceptButtonProps: PropTypes.oneOfType([\n      PropTypes.object,\n    ]),\n    /**\n     * If set to true, Dialog buttons will turn over\n     */\n    swapButtons: PropTypes.bool,\n    /**\n     * The css class name of the root element\n     */\n    className: PropTypes.string,\n    /**\n     * The css class name of the overlay element\n     */\n    classNameOverlay: PropTypes.string,\n    /**\n     * The css class name of the content container element\n     */\n    classNameDialog: PropTypes.string,\n    smooth: PropTypes.bool,\n    /**\n     * Fired when 'cancel' button click\n     */\n    onCancel: PropTypes.func,\n    /**\n     * Fired when 'accept' button click\n     */\n    onAccept: PropTypes.func,\n    /**\n     * Fired when the Dialog is requested to be closed by a click outside\n     * the Dialog or press escape button\n     */\n    onClose: PropTypes.func,\n  };\n\n  static defaultProps = {\n    title: '',\n    children: null,\n    cancelText: 'Cancel',\n    cancelButtonProps: {},\n    acceptText: 'Accept',\n    acceptButtonProps: {},\n    swapButtons: false,\n    className: '',\n    classNameOverlay: '',\n    classNameDialog: '',\n    smooth: false,\n    onCancel: null,\n    onAccept: null,\n    onClose: null,\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onEscapePress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onEscapePress);\n  }\n\n  /**\n   * onKeyDown handler\n   * @param {SytheticEvent} e\n   */\n  onEscapePress = (e) => {\n    const { onClose } = this.props;\n\n    if (e.keyCode === 27 && onClose) {\n      onClose(e);\n    }\n  }\n\n  /**\n   * Render cancel button\n   * @return {ReactElement} markup\n   */\n  renderCancelButton() {\n    const { cancelText, cancelButtonProps, onCancel } = this.props;\n\n    return cancelText && (\n      <Button\n        size=\"small\"\n        className={s.button}\n        onClick={onCancel}\n        {...cancelButtonProps}\n      >\n        {cancelText}\n      </Button>\n    );\n  }\n\n  /**\n   * Render accept button\n   * @return {ReactElement} markup\n   */\n  renderAcceptButton() {\n    const { acceptText, acceptButtonProps, onAccept } = this.props;\n\n    return acceptText && (\n      <Button\n        primary\n        size=\"small\"\n        className={s.button}\n        onClick={onAccept}\n        autoFocus\n        {...acceptButtonProps}\n      >\n        {acceptText}\n      </Button>\n    );\n  }\n\n  /**\n   * Render buttons\n   * @return {ReactElement} markup\n   */\n  renderButtons() {\n    const { cancelText, acceptText, swapButtons } = this.props;\n\n    return (acceptText || cancelText) && (\n      <div className={s.buttons}>\n        {!swapButtons && this.renderCancelButton()}\n        {this.renderAcceptButton()}\n        {swapButtons && this.renderCancelButton()}\n      </div>\n    );\n  }\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const {\n      title,\n      children,\n      cancelText,\n      acceptText,\n      swapButtons,\n      cancelButtonProps,\n      acceptButtonProps,\n      className,\n      classNameOverlay,\n      classNameDialog,\n      smooth,\n      onCancel,\n      onAccept,\n      onClose,\n      ...other\n    } = this.props;\n\n    return (\n      <div\n        className={classNames(\n          s.c_dialog_wrapper,\n          className,\n          { [s.m_smooth]: smooth },\n        )}\n        {...other}\n      >\n        <div\n          className={classNames(\n            s.overlay,\n            classNameOverlay,\n          )}\n          onClick={onClose}\n        />\n        <div className={s.container}>\n          <div\n            className={classNames(\n              s.dialog,\n              classNameDialog,\n            )}\n          >\n            {title && (\n              <h3 className={classNames(s.title, 'break_word')}>\n                {title}\n              </h3>\n            )}\n            <div className={s.content}>\n              {children}\n            </div>\n            {this.renderButtons()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]}