var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import withAnalytics from '../../containers/analytics_hoc';

/**
 * Button component
 */

var Button = function (_React$Component) {
  _inherits(Button, _React$Component);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  _createClass(Button, [{
    key: 'isLink',


    /**
     * If component is link
     * @return {boolean}
     */
    value: function isLink() {
      var _props = this.props,
          disabled = _props.disabled,
          href = _props.href;


      return href && !disabled;
    }

    /**
     * render
     * @return {ReactElement} markup
     */

  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          bgType = _props2.bgType,
          color = _props2.color,
          align = _props2.align,
          textColor = _props2.textColor,
          size = _props2.size,
          href = _props2.href,
          className = _props2.className,
          component = _props2.component,
          children = _props2.children,
          componentRef = _props2.componentRef,
          full = _props2.full,
          other = _objectWithoutProperties(_props2, ['bgType', 'color', 'align', 'textColor', 'size', 'href', 'className', 'component', 'children', 'componentRef', 'full']);

      var componentProps = Object.assign({
        'data-component': 'button',
        'data-type': bgType,
        className: Button.toClassName(this.props),
        children: React.createElement(
          'span',
          null,
          children
        )
      }, other);

      if (component) {
        return component(componentProps);
      }

      var isLink = this.isLink();
      var Component = isLink ? 'a' : 'button';

      return React.createElement(Component, _extends({
        ref: componentRef,
        href: isLink ? href : null
      }, componentProps));
    }
  }], [{
    key: 'toClassName',

    /**
     * Construct class name for the root element using options from props
     * @param {{
     *  align: 'left' | 'center' | 'right';
     *  size: 'small' | 'medium' | 'large';
     *  textColor: string;
     *  color: string;
     *  bgType: 'fill' | 'stroke';
     *  className: string;
     *  full: boolean;
     * }} options
     * @return {string}
     */
    value: function toClassName(options) {
      var _classnames;

      return classnames('button', 'round_small', 'truncate_text', 'break_word', ['text_' + options.align], ['button_' + options.size], ['button_text_' + options.textColor], (_classnames = {}, _defineProperty(_classnames, 'fill_' + options.color, options.bgType === 'fill'), _defineProperty(_classnames, 'stroke_' + options.color, options.bgType === 'stroke'), _defineProperty(_classnames, 'text_' + options.textColor, options.textColor), _defineProperty(_classnames, 'button_full', options.full), _classnames), options.className);
    }
  }]);

  return Button;
}(React.Component);

Button.propTypes = {
  /**
   * Component type one of `fill` or `stroke`.
   * If `fill` - component will have background and border from `color` props.
   * If `stroke` - component will have border from `color` props and transparent background.
   * If `clear` - component will have transparent border and transparent background.
   */
  bgType: PropTypes.oneOf(['fill', 'stroke', 'clear']),
  /**
   * Component color from theme
   */
  color: PropTypes.string,
  /**
   * Component content aligment
   */
  align: PropTypes.oneOf(['left', 'center', 'right']),
  /**
   * Component text color from theme
   */
  textColor: PropTypes.string,
  /**
   * Component size
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /**
   * The URL to link to when the button is clicked
   */
  href: PropTypes.string,
  /**
   * This is what will be displayed inside the button
   */
  children: PropTypes.node.isRequired,
  /**
   * Callback function fired when the button is clicked
   */
  onClick: PropTypes.func,
  /**
   * Disables the button if set to true
   */
  disabled: PropTypes.bool,
  /**
   * The CSS class name of the root element
   */
  className: PropTypes.string,
  /**
   * The function component for render custom element
   */
  component: PropTypes.func,
  /**
   * Component ref.
   */
  componentRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({ current: PropTypes.any })]),
  /**
   * Component full-width.
   */
  full: PropTypes.bool
};
Button.defaultProps = {
  bgType: 'fill',
  color: 'primary',
  align: 'center',
  textColor: 'white',
  size: 'medium',
  href: undefined,
  onClick: null,
  disabled: false,
  className: '',
  component: undefined,
  componentRef: undefined,
  full: false
};


export default withAnalytics(Button, 'onClick');
//# sourceMappingURL=index.js.map