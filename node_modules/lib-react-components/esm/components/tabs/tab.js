var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import withAnalytics from '../../containers/analytics_hoc';

/**
 * Tab component
 */
function Tab(props) {
  var _classNames2;

  var className = props.className,
      disabled = props.disabled,
      value = props.value,
      children = props.children,
      selected = props.selected,
      onClick = props.onClick,
      color = props.color,
      colorOn = props.colorOn,
      component = props.component,
      other = _objectWithoutProperties(props, ['className', 'disabled', 'value', 'children', 'selected', 'onClick', 'color', 'colorOn', 'component']);

  /**
   * Tab click handler
   * @param {SytheticEvent} e
   */


  function onClickHandler(e) {
    if (!disabled) {
      onClick(e, value);
    }
  }

  var componentProps = Object.assign({
    'data-component': 'tab',
    'data-selected': selected,
    onClick: onClickHandler,
    className: classNames('tab', 'h5', 'break_word', _defineProperty({}, 'text_' + color, !selected), (_classNames2 = {}, _defineProperty(_classNames2, 'text_' + colorOn, selected), _defineProperty(_classNames2, 'stroke_' + colorOn, selected), _classNames2), className),
    disabled: disabled || selected,
    children: React.createElement(
      'span',
      null,
      children
    )
  }, other);

  if (component) {
    return component(componentProps);
  }

  return React.createElement('button', _extends({
    type: 'button'
  }, componentProps));
}

Tab.propTypes = {
  /**
   * The css class name of the root element
   */
  className: PropTypes.string,
  /**
   * Disabled the Tab if set to true
   */
  disabled: PropTypes.bool,
  /**
   * If value prop passed to Tabs component, this value prop is also required.
   * It assigns a value to the tab so that it can be selected by the Tabs
   */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  /**
   * The contents of the Tab
   */
  children: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.node]).isRequired,
  /**
   * Selected the Tab if set to true
   */
  selected: PropTypes.bool,
  /**
   * Callback function that is fired when the Tab clicked
   */
  onClick: PropTypes.func,
  /**
   * Component color from theme
   */
  color: PropTypes.string,
  /**
   * Component checked color from theme
   */
  colorOn: PropTypes.string,
  /**
   * The function component for render custom element
   */
  component: PropTypes.func
};

Tab.defaultProps = {
  className: '',
  disabled: false,
  selected: false,
  onClick: function onClick() {},

  color: 'grey',
  colorOn: 'primary',
  component: undefined
};

export default withAnalytics(Tab, 'onClick');
//# sourceMappingURL=tab.js.map