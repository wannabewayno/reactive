{"version":3,"sources":["../../../src/components/switch_handler/index.jsx"],"names":["React","PureComponent","PropTypes","Typography","SwitchHandler","props","onChange","e","onCheck","checkedState","state","hasOwnProperty","call","setState","checked","defaultChecked","nextProps","label","labelPosition","labelProps","propTypes","name","string","bool","disabled","func","inputProps","oneOfType","object","number","oneOf","className","tabIndex","bgType","color","colorOn","iconColor","iconColorOn","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '../typography';\n\n/**\n * SwitchHandler component (for extend)\n */\nexport default class SwitchHandler extends PureComponent {\n  static propTypes = {\n    /**\n     * Name attribute for input tag\n     */\n    name: PropTypes.string,\n    /**\n     * Initial state for input\n     */\n    defaultChecked: PropTypes.bool,\n    /**\n     * Will disable the toggle if true\n     */\n    disabled: PropTypes.bool, // eslint-disable-line\n    /**\n     * Callback function that is fired when the toggle switch is toggled\n     */\n    onCheck: PropTypes.func, // eslint-disable-line\n    /**\n     * Toggled if set to true\n     */\n    checked: PropTypes.bool, // eslint-disable-line\n    /**\n     * Properties for `<input type=\"checkbox\" />` element\n     */\n    inputProps: PropTypes.oneOfType([ // eslint-disable-line\n      PropTypes.object,\n    ]),\n    /**\n     * Label for toggle\n     */\n    label: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * Where the label will be placed next to the toggle\n     */\n    labelPosition: PropTypes.oneOf(['left', 'right']),\n    /**\n     * `Typography` props for label\n     */\n    labelProps: PropTypes.object, // eslint-disable-line\n    /**\n     * The CSS class name of the root element\n     */\n    className: PropTypes.string, // eslint-disable-line\n    /**\n     * The tabIndex of the root element\n     */\n    tabIndex: PropTypes.number, // eslint-disable-line\n    /**\n     * Component type one of `fill` or `stroke`.\n     * If `fill` - component will be have background-color from `color` props.\n     * If `stroke` - component will be have border-color from `color` props.\n     */\n    bgType: PropTypes.oneOf(['fill', 'stroke']), // eslint-disable-line\n    /**\n     * Component color from theme\n     */\n    color: PropTypes.string, // eslint-disable-line\n    /**\n     * Component checked color from theme\n     */\n    colorOn: PropTypes.string, // eslint-disable-line\n    /**\n     * Component icon color from theme\n     */\n    iconColor: PropTypes.string, // eslint-disable-line\n    /**\n     * Component checked icon color from theme\n     */\n    iconColorOn: PropTypes.string, // eslint-disable-line\n  };\n\n  static defaultProps = {\n    name: undefined,\n    defaultChecked: false,\n    disabled: false,\n    inputProps: {},\n    label: undefined,\n    labelPosition: 'left',\n    labelProps: {},\n    className: '',\n    tabIndex: 0,\n    bgType: 'fill',\n    color: 'light_grey',\n    colorOn: 'primary',\n    iconColor: 'grey',\n    iconColorOn: 'white',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkedState: !!(props.checked || props.defaultChecked),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { checked } = this.props;\n\n    if (checked !== nextProps.checked) {\n      this.setState({\n        checkedState: nextProps.checked,\n      });\n    }\n  }\n\n  /**\n   * onChange handler\n   * @param {SytheticEvent} e\n   */\n  onChange = (e) => {\n    const { onCheck } = this.props;\n    const { checkedState } = this.state;\n\n    if (onCheck) onCheck(e, !checkedState);\n\n    if (!{}.hasOwnProperty.call(this.props, 'checked')) {\n      this.setState({\n        checkedState: !checkedState,\n      });\n    }\n  };\n\n  /**\n   * renderLabel\n   * @return {ReactElement} markup\n   */\n  renderLabel() {\n    const { label, labelPosition, labelProps } = this.props;\n\n    return label && (\n      <Typography\n        type=\"b2\"\n        color=\"black\"\n        className=\"switch_label\"\n        data-position={labelPosition}\n        {...labelProps}\n      >\n        {label}\n      </Typography>\n    );\n  }\n\n  render() {\n    return null;\n  }\n}\n"]}