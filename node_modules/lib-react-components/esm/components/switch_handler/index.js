var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Typography from '../typography';

/**
 * SwitchHandler component (for extend)
 */

var SwitchHandler = function (_PureComponent) {
  _inherits(SwitchHandler, _PureComponent);

  function SwitchHandler(props) {
    _classCallCheck(this, SwitchHandler);

    var _this = _possibleConstructorReturn(this, (SwitchHandler.__proto__ || Object.getPrototypeOf(SwitchHandler)).call(this, props));

    _this.onChange = function (e) {
      var onCheck = _this.props.onCheck;
      var checkedState = _this.state.checkedState;


      if (onCheck) onCheck(e, !checkedState);

      if (!{}.hasOwnProperty.call(_this.props, 'checked')) {
        _this.setState({
          checkedState: !checkedState
        });
      }
    };

    _this.state = {
      checkedState: !!(props.checked || props.defaultChecked)
    };
    return _this;
  }

  _createClass(SwitchHandler, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var checked = this.props.checked;


      if (checked !== nextProps.checked) {
        this.setState({
          checkedState: nextProps.checked
        });
      }
    }

    /**
     * onChange handler
     * @param {SytheticEvent} e
     */

  }, {
    key: 'renderLabel',


    /**
     * renderLabel
     * @return {ReactElement} markup
     */
    value: function renderLabel() {
      var _props = this.props,
          label = _props.label,
          labelPosition = _props.labelPosition,
          labelProps = _props.labelProps;


      return label && React.createElement(
        Typography,
        _extends({
          type: 'b2',
          color: 'black',
          className: 'switch_label',
          'data-position': labelPosition
        }, labelProps),
        label
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return SwitchHandler;
}(PureComponent);

SwitchHandler.propTypes = {
  /**
   * Name attribute for input tag
   */
  name: PropTypes.string,
  /**
   * Initial state for input
   */
  defaultChecked: PropTypes.bool,
  /**
   * Will disable the toggle if true
   */
  disabled: PropTypes.bool, // eslint-disable-line
  /**
   * Callback function that is fired when the toggle switch is toggled
   */
  onCheck: PropTypes.func, // eslint-disable-line
  /**
   * Toggled if set to true
   */
  checked: PropTypes.bool, // eslint-disable-line
  /**
   * Properties for `<input type="checkbox" />` element
   */
  inputProps: PropTypes.oneOfType([// eslint-disable-line
  PropTypes.object]),
  /**
   * Label for toggle
   */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Where the label will be placed next to the toggle
   */
  labelPosition: PropTypes.oneOf(['left', 'right']),
  /**
   * `Typography` props for label
   */
  labelProps: PropTypes.object, // eslint-disable-line
  /**
   * The CSS class name of the root element
   */
  className: PropTypes.string, // eslint-disable-line
  /**
   * The tabIndex of the root element
   */
  tabIndex: PropTypes.number, // eslint-disable-line
  /**
   * Component type one of `fill` or `stroke`.
   * If `fill` - component will be have background-color from `color` props.
   * If `stroke` - component will be have border-color from `color` props.
   */
  bgType: PropTypes.oneOf(['fill', 'stroke']), // eslint-disable-line
  /**
   * Component color from theme
   */
  color: PropTypes.string, // eslint-disable-line
  /**
   * Component checked color from theme
   */
  colorOn: PropTypes.string, // eslint-disable-line
  /**
   * Component icon color from theme
   */
  iconColor: PropTypes.string, // eslint-disable-line
  /**
   * Component checked icon color from theme
   */
  iconColorOn: PropTypes.string // eslint-disable-line
};
SwitchHandler.defaultProps = {
  name: undefined,
  defaultChecked: false,
  disabled: false,
  inputProps: {},
  label: undefined,
  labelPosition: 'left',
  labelProps: {},
  className: '',
  tabIndex: 0,
  bgType: 'fill',
  color: 'light_grey',
  colorOn: 'primary',
  iconColor: 'grey',
  iconColorOn: 'white'
};
export default SwitchHandler;
//# sourceMappingURL=index.js.map