var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { Popper } from 'react-popper';
import RightTriangleIcon from '../icons/right_triangle';
import Portal from '../../containers/portal';

/**
 * TooltipPopper component
 * @description
 *  All props for Popper you can found on https://github.com/FezVrasta/react-popper.
 */

var TooltipPopper = function (_React$Component) {
  _inherits(TooltipPopper, _React$Component);

  function TooltipPopper() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TooltipPopper);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TooltipPopper.__proto__ || Object.getPrototypeOf(TooltipPopper)).call.apply(_ref, [this].concat(args))), _this), _this.scheduleUpdate = function () {
      return null;
    }, _this.renderTooltipBody = function (_ref2) {
      var _ref3;

      var ref = _ref2.ref,
          _ref2$style = _ref2.style,
          top = _ref2$style.top,
          left = _ref2$style.left,
          position = _ref2$style.position,
          placement = _ref2.placement,
          arrowProps = _ref2.arrowProps,
          scheduleUpdate = _ref2.scheduleUpdate;
      var _this$props = _this.props,
          children = _this$props.children,
          arrow = _this$props.arrow,
          offset = _this$props.offset,
          color = _this$props.color,
          zIndex = _this$props.zIndex,
          classNameTooltip = _this$props.classNameTooltip,
          classNameTooltipContent = _this$props.classNameTooltipContent,
          showDelay = _this$props.showDelay;

      var direction = TooltipPopper.getDirection(placement);

      _this.scheduleUpdate = scheduleUpdate;

      return React.createElement(
        'div',
        {
          ref: ref,
          style: (_ref3 = {
            top: 0,
            left: 0,
            position: position,
            transform: 'translate3d(' + left + 'px, ' + top + 'px, 0)',
            transformOrigin: 'top center'
          }, _defineProperty(_ref3, 'padding' + direction, offset), _defineProperty(_ref3, 'zIndex', zIndex), _ref3),
          'data-component': 'tooltip_popper',
          className: classNameTooltip
        },
        React.createElement(
          'div',
          {
            className: classnames('tooltip', 'fill_' + color, 'shadow', 'round_small', 'break_word', classNameTooltipContent),
            'data-component': 'tooltip_content',
            'data-placement': placement,
            style: {
              animationDelay: showDelay + 'ms',
              MozAnimationDelay: showDelay + 'ms',
              WebkitAnimationDelay: showDelay + 'ms'
            }
          },
          arrow && React.createElement(
            'div',
            {
              ref: arrowProps.ref,
              style: arrowProps.style,
              'data-component': 'tooltip_arrow',
              className: 'tooltip_arrow'
            },
            React.createElement(RightTriangleIcon, {
              className: classnames('tooltip_arrow_icon', 'fill_' + color)
            })
          ),
          children
        )
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TooltipPopper, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps() {
      // Make schedule to update tooltip, position if button position failed
      this.scheduleUpdate();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          referenceElement = _props.referenceElement,
          open = _props.open,
          placementProp = _props.placement,
          positionFixed = _props.positionFixed,
          usePortal = _props.usePortal,
          preventOverflow = _props.preventOverflow,
          preventFlip = _props.preventFlip,
          flipBoundaryElement = _props.flipBoundaryElement,
          other = _objectWithoutProperties(_props, ['referenceElement', 'open', 'placement', 'positionFixed', 'usePortal', 'preventOverflow', 'preventFlip', 'flipBoundaryElement']);

      if (!open) {
        return null;
      }

      var renderTooltip = React.createElement(
        Popper,
        _extends({
          modifiers: {
            computeStyle: {
              gpuAcceleration: false
            },
            preventOverflow: {
              enabled: preventOverflow
            },
            hide: {
              enabled: preventOverflow
            },
            flip: {
              enabled: !preventFlip,
              boundariesElement: flipBoundaryElement
            }
          },
          placement: placementProp,
          referenceElement: referenceElement,
          positionFixed: positionFixed
        }, other),
        this.renderTooltipBody
      );

      if (usePortal) {
        return React.createElement(
          Portal,
          { container: usePortal instanceof Element ? usePortal : null },
          renderTooltip
        );
      }

      return renderTooltip;
    }
  }], [{
    key: 'getDirection',
    value: function getDirection(placement) {
      if (placement) {
        if (placement.indexOf('right') === 0) {
          return 'Left';
        }
        if (placement.indexOf('left') === 0) {
          return 'Right';
        }
        if (placement.indexOf('bottom') === 0) {
          return 'Top';
        }
        if (placement.indexOf('top') === 0) {
          return 'Bottom';
        }
      }

      return '';
    }
  }]);

  return TooltipPopper;
}(React.Component);

export default TooltipPopper;


TooltipPopper.propTypes = {
  /**
   * This is what will be displayed inside the popper.
   */
  children: PropTypes.node.isRequired,
  /**
   * If `true`, the popper arrow is shown.
   */
  arrow: PropTypes.bool,
  /**
   * The `referenceObject` is an object that provides an interface
   * compatible with Popper.js and lets you use it as replacement of
   * a real DOM node.
   */
  referenceElement: PropTypes.shape({
    clientHeight: PropTypes.number,
    clientWidth: PropTypes.number,
    getBoundingClientRect: PropTypes.func
  }).isRequired,
  /**
   * If `true`, the popper is shown.
   */
  open: PropTypes.bool,
  /**
   * Popper placement.
   */
  placement: PropTypes.oneOf(['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']),
  /**
   * Set this to `true` if you want popper to position it self in `fixed` mode.
   */
  positionFixed: PropTypes.bool,
  /**
   * Padding from popper to `referenceElement` in `px`.
   */
  offset: PropTypes.number,
  /**
   * Color for tooltip component.
   */
  color: PropTypes.string,
  /**
   * Z-index for tooltip component.
   */
  zIndex: PropTypes.number,
  /**
   * Use React portal for render tooltip to another elemenet.
   */
  usePortal: PropTypes.oneOfType([PropTypes.bool, PropTypes.instanceOf(HTMLElement)]),
  /**
   * Use preventOverflow for prevent overflow on tooltip.
   */
  preventOverflow: PropTypes.bool,
  /**
   * Use preventFlip for prevent flipping tooltip, when no space.
   */
  preventFlip: PropTypes.bool,
  /**
   * Class name for tooltip popper root element
   */
  classNameTooltip: PropTypes.string,
  /**
   * Class name for tooltip popper content element
   */
  classNameTooltipContent: PropTypes.string,
  /**
   * The number of milliseconds to wait before showing the tooltip.
   */
  showDelay: PropTypes.number,
  /**
   * Flip boundary element modifier
   */
  flipBoundaryElement: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(HTMLElement)])
};

TooltipPopper.defaultProps = {
  arrow: true,
  open: false,
  placement: 'auto',
  positionFixed: true,
  offset: 10,
  color: 'white',
  zIndex: 1,
  usePortal: false,
  preventOverflow: true,
  preventFlip: false,
  classNameTooltip: '',
  classNameTooltipContent: '',
  showDelay: 0,
  flipBoundaryElement: 'viewport'
};
//# sourceMappingURL=tooltip_popper.js.map