{"version":3,"sources":["../../../src/components/autocomplete/index.jsx"],"names":["React","Component","Children","cloneElement","isValidElement","PropTypes","classnames","TextField","SelectDropdown","validationPropType","props","propName","componentName","value","rest","error","oneOf","func","Autocomplete","state","open","valueSelected","_inputBlurTimeout","_inputFocusTimeout","_overlayBlurTimeout","_overlayHasFocus","_childrenValues","textFieldNode","_onBlurInput","e","onBlur","window","setTimeout","_closeDropdown","_onFocusInput","onFocus","_onFocusOverlay","preventDefault","inputNode","focus","_onBlurOverlay","_onKeyDownInput","event","onKeyDown","disabled","name","keyCode","_handleSpaceEnterPress","_handleItemHovered","_onClickSelectItem","onChange","valueChild","child","validateField","_onChangeInput","target","_openDropdown","clearTimeout","setState","type","_handleScrollToElement","valueIndex","indexOf","prevValue","nextValue","dropdownNode","scrollToFocusedElement","className","defaultValue","required","valid","placeholder","bgType","color","textColor","colorFocus","size","mobileSize","inputProps","children","validation","placeholderColor","other","options","map","disabledChild","selected","push","onClick","hasFocus","mustOpen","length","node","propTypes","string","oneOfType","number","bool","object","arrayOf","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, Children, cloneElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport TextField from '../text_field';\nimport SelectDropdown from '../select/select_dropdown';\n\n/**\n * Validate `validation` props\n * @param {object} props\n * @param {string} propName\n * @param {string} componentName\n * @returns {object}\n */\nfunction validationPropType(props, propName, componentName, ...rest) {\n  const value = props[propName];\n\n  if (typeof value === 'string') {\n    const error = PropTypes.oneOf([\n      'password',\n      'fullName',\n      'email',\n      'phone',\n      'number',\n      'text',\n      'letters',\n      'date',\n      'cert',\n      'hex',\n      'base64',\n      'objectID',\n      'url',\n    ])(props, propName, componentName, ...rest);\n\n    if (error !== null) {\n      return error;\n    }\n\n    return null;\n  }\n\n  const error = PropTypes.func(props, propName, componentName, ...rest);\n\n  if (error !== null) {\n    return error;\n  }\n\n  return null;\n}\n\nexport default class Autocomplete extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    /**\n     * The CSS class name of the wrapper element.\n     */\n    className: PropTypes.string,\n    /**\n     * The default input value, useful when not controlling the component.\n     */\n    defaultValue: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * If true, the input will be disabled.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Callback fired when the value is changed.\n     */\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    /**\n     * Type of the input element.\n     */\n    type: PropTypes.oneOf([\n      'text',\n      'password',\n      'email',\n      'tel',\n      'date',\n    ]),\n    /**\n     * The input value, required for a controlled component.\n     */\n    value: PropTypes.oneOfType([ // eslint-disable-line\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * If true, the input will be required.\n     */\n    required: PropTypes.bool,\n    /**\n     * If false, the input will be unvalid styles.\n     */\n    valid: PropTypes.bool,\n    /**\n     * The short hint displayed in the input before the user enters a value.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * Color for placeholder\n     */\n    placeholderColor: PropTypes.string,\n    /**\n     * Name attribute of the input element.\n     */\n    name: PropTypes.string,\n    /**\n     * Component type one of `fill` or `stroke`.\n     * If `fill` - component will be have background-color from `color` props.\n     * If `stroke` - component will be have border-color from `color` props.\n     */\n    bgType: PropTypes.oneOf(['fill', 'stroke']),\n    /**\n     * Component color from theme\n     */\n    color: PropTypes.string,\n    /**\n     * Component text color from theme\n     */\n    textColor: PropTypes.string,\n    /**\n     * Component focus color from theme\n     */\n    colorFocus: PropTypes.string,\n    /**\n     * Component size.\n     */\n    size: PropTypes.oneOf(['medium', 'large']),\n    /**\n     * Component size for mobile.\n     */\n    mobileSize: PropTypes.oneOf(['medium', 'large']),\n    /**\n     * Properties applied to the input element.\n     */\n    inputProps: PropTypes.oneOfType([\n      PropTypes.object,\n    ]),\n    /**\n     * Array with validation types.\n     */\n    validation: PropTypes.arrayOf(validationPropType),\n  }\n\n  static defaultProps = {\n    children: null,\n    className: '',\n    defaultValue: undefined,\n    disabled: false,\n    onChange() {},\n    onFocus() {},\n    onBlur() {},\n    onKeyDown() {},\n    type: 'text',\n    required: false,\n    valid: undefined,\n    placeholder: undefined,\n    placeholderColor: 'grey_4',\n    name: undefined,\n    bgType: 'fill',\n    color: 'light_grey',\n    textColor: 'black',\n    colorFocus: 'primary',\n    size: 'medium',\n    mobileSize: undefined,\n    inputProps: {},\n    validation: undefined,\n  }\n\n  state = {\n    open: false,\n    valueSelected: null,\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this._inputBlurTimeout);\n    clearTimeout(this._inputFocusTimeout);\n    clearTimeout(this._overlayBlurTimeout);\n  }\n\n  _inputBlurTimeout = null;\n  _inputFocusTimeout = null;\n  _overlayBlurTimeout = null;\n  _overlayHasFocus = false;\n  _childrenValues = [];\n  textFieldNode = null;\n\n  _onBlurInput = (e) => {\n    const { onBlur } = this.props;\n\n    this._inputBlurTimeout = window.setTimeout(\n      () => {\n        if (!this._overlayHasFocus) {\n          this._closeDropdown();\n\n          onBlur(e);\n        }\n      },\n      1,\n    );\n  }\n\n  _onFocusInput = (e) => {\n    const { onFocus } = this.props;\n\n    this._inputFocusTimeout = window.setTimeout(\n      () => { this._overlayHasFocus = false; },\n      2,\n    );\n\n    onFocus(e);\n  }\n\n  _onFocusOverlay = (e) => {\n    e.preventDefault();\n\n    this._overlayHasFocus = true;\n    this.textFieldNode.inputNode.inputNode.focus();\n  }\n\n  _onBlurOverlay = () => {\n    this._overlayBlurTimeout = window.setTimeout(\n      () => { this._overlayHasFocus = false; },\n      3,\n    );\n  }\n\n  _closeDropdown() {\n    const { open } = this.state;\n\n    if (!open) {\n      return;\n    }\n\n    this.setState({\n      open: false,\n    });\n  }\n\n  _openDropdown() {\n    const { open } = this.state;\n\n    if (open) {\n      return;\n    }\n\n    this.setState({\n      open: true,\n    });\n  }\n\n  _onKeyDownInput = (event) => {\n    const {\n      onKeyDown,\n      disabled,\n      name,\n    } = this.props;\n    const {\n      open,\n    } = this.state;\n\n    if (!disabled) {\n      const { keyCode } = event;\n\n      /**\n       * escape key press\n       * hide dropdown list\n       */\n      if (keyCode === 27) {\n        this._closeDropdown();\n      }\n\n      /**\n       * space key press\n       * hide dropdown or select element in dropdown list\n       */\n      if (keyCode === 32) {\n        event.preventDefault();\n        this._handleSpaceEnterPress(event);\n      }\n\n      /**\n       * enter key press\n       * hide dropdown or select element in dropdown list\n       */\n      if (keyCode === 13 && open) {\n        event.preventDefault();\n        this._handleSpaceEnterPress(event);\n      }\n\n      /**\n       * up key press\n       * select prev element in dropdown list\n       */\n      if (keyCode === 38) {\n        event.preventDefault();\n        this._handleItemHovered('up');\n      }\n\n      /**\n       * down key press\n       * select next element in dropdown list\n       */\n      if (keyCode === 40) {\n        event.preventDefault();\n        this._handleItemHovered('down');\n      }\n    }\n\n    onKeyDown(event, name);\n  };\n\n  _handleSpaceEnterPress(e) {\n    const { name, onChange } = this.props;\n    const {\n      valueSelected,\n      open,\n    } = this.state;\n\n    if (open && valueSelected) {\n      if (!('value' in this.props)) {\n        this.textFieldNode.inputNode.inputNode.value = valueSelected;\n        this.textFieldNode.validateField();\n      }\n\n      this._closeDropdown();\n\n      onChange(e, valueSelected, name, 'select');\n    }\n  }\n\n  _handleItemHovered(type) {\n    const { valueSelected, open } = this.state;\n    const { _childrenValues } = this;\n\n    if (!open) return;\n\n    if (!type) {\n      this.setState({\n        valueSelected: _childrenValues[0],\n      }, this._handleScrollToElement);\n\n      return;\n    }\n\n    const valueIndex = _childrenValues.indexOf(valueSelected);\n    const prevValue = _childrenValues[valueIndex - 1];\n    const nextValue = _childrenValues[valueIndex + 1];\n\n    if (type === 'up' && prevValue) {\n      this.setState({\n        valueSelected: prevValue,\n      }, this._handleScrollToElement);\n    }\n\n    if (type === 'down' && nextValue) {\n      this.setState({\n        valueSelected: nextValue,\n      }, this._handleScrollToElement);\n    }\n  }\n\n  _handleScrollToElement() {\n    if (this.dropdownNode) {\n      this.dropdownNode.scrollToFocusedElement();\n    }\n  }\n\n  _onClickSelectItem = child => (e) => {\n    const { onChange, name } = this.props;\n    const valueChild = child.props.value;\n\n    this._closeDropdown();\n\n    if (!('value' in this.props)) {\n      this.textFieldNode.inputNode.inputNode.value = valueChild;\n      this.textFieldNode.validateField();\n    }\n\n    onChange(e, valueChild, name, 'select');\n  };\n\n  _onChangeInput = (e) => {\n    const { onChange, name } = this.props;\n    const value = e.target.value;\n\n    this._openDropdown();\n\n    onChange(e, value, name);\n  }\n\n  render() {\n    const {\n      className,\n      defaultValue,\n      disabled,\n      onChange,\n      onFocus,\n      onBlur,\n      type,\n      value,\n      required,\n      valid,\n      placeholder,\n      name,\n      bgType,\n      color,\n      textColor,\n      colorFocus,\n      size,\n      mobileSize,\n      inputProps,\n      children,\n      validation,\n      placeholderColor,\n      ...other\n    } = this.props;\n    const {\n      open,\n      valueSelected,\n    } = this.state;\n\n    this._childrenValues = [];\n\n    const options = Children.map(children, (child) => {\n      if (!isValidElement(child)) {\n        return null;\n      }\n\n      const {\n        value: valueChild,\n        disabled: disabledChild,\n      } = child.props;\n      const selected = false;\n\n      if (!disabledChild) {\n        this._childrenValues.push(valueChild);\n      }\n\n      return cloneElement(child, {\n        onClick: disabledChild ? null : this._onClickSelectItem(child),\n        selected,\n        hasFocus: valueSelected === valueChild,\n        size,\n        textColor,\n        colorFocus,\n      });\n    });\n    const mustOpen = open && options && options.length > 0;\n\n    return (\n      <div\n        data-component=\"autocomplete\"\n        data-open={mustOpen}\n        data-disabled={disabled}\n        className={classnames(\n          'autocomplete',\n          className,\n        )}\n        {...other}\n      >\n        <TextField\n          placeholder={placeholder}\n          onBlur={this._onBlurInput}\n          onFocus={this._onFocusInput}\n          onChange={this._onChangeInput}\n          onKeyDown={this._onKeyDownInput}\n          size={size}\n          mobileSize={mobileSize}\n          textColor={textColor}\n          colorFocus={colorFocus}\n          bgType={bgType}\n          color={color}\n          ref={(node) => { this.textFieldNode = node; }}\n          defaultValue={defaultValue}\n          value={value}\n          disabled={disabled}\n          type={type}\n          required={required}\n          valid={valid}\n          name={name}\n          inputProps={inputProps}\n          autoComplete=\"off\"\n          validation={validation}\n        />\n        {(options && options.length > 0) && (\n          <SelectDropdown\n            className=\"autocomplete_dropdown\"\n            bgType={bgType}\n            color={color}\n            colorFocus={colorFocus}\n            ref={(node) => { this.dropdownNode = node; }}\n            tabIndex={0}\n            onFocus={this._onFocusOverlay}\n            onBlur={this._onBlurOverlay}\n          >\n            {options}\n          </SelectDropdown>\n        )}\n      </div>\n    );\n  }\n}\n"]}