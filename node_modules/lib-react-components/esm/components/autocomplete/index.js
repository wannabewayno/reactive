var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, Children, cloneElement, isValidElement } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import TextField from '../text_field';
import SelectDropdown from '../select/select_dropdown';

/**
 * Validate `validation` props
 * @param {object} props
 * @param {string} propName
 * @param {string} componentName
 * @returns {object}
 */
function validationPropType(props, propName, componentName) {
  var value = props[propName];

  for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  if (typeof value === 'string') {
    var _error = PropTypes.oneOf(['password', 'fullName', 'email', 'phone', 'number', 'text', 'letters', 'date', 'cert', 'hex', 'base64', 'objectID', 'url']).apply(undefined, [props, propName, componentName].concat(rest));

    if (_error !== null) {
      return _error;
    }

    return null;
  }

  var error = PropTypes.func.apply(PropTypes, [props, propName, componentName].concat(rest));

  if (error !== null) {
    return error;
  }

  return null;
}

var Autocomplete = function (_Component) {
  _inherits(Autocomplete, _Component);

  function Autocomplete() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Autocomplete);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Autocomplete.__proto__ || Object.getPrototypeOf(Autocomplete)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      open: false,
      valueSelected: null
    }, _this._inputBlurTimeout = null, _this._inputFocusTimeout = null, _this._overlayBlurTimeout = null, _this._overlayHasFocus = false, _this._childrenValues = [], _this.textFieldNode = null, _this._onBlurInput = function (e) {
      var onBlur = _this.props.onBlur;


      _this._inputBlurTimeout = window.setTimeout(function () {
        if (!_this._overlayHasFocus) {
          _this._closeDropdown();

          onBlur(e);
        }
      }, 1);
    }, _this._onFocusInput = function (e) {
      var onFocus = _this.props.onFocus;


      _this._inputFocusTimeout = window.setTimeout(function () {
        _this._overlayHasFocus = false;
      }, 2);

      onFocus(e);
    }, _this._onFocusOverlay = function (e) {
      e.preventDefault();

      _this._overlayHasFocus = true;
      _this.textFieldNode.inputNode.inputNode.focus();
    }, _this._onBlurOverlay = function () {
      _this._overlayBlurTimeout = window.setTimeout(function () {
        _this._overlayHasFocus = false;
      }, 3);
    }, _this._onKeyDownInput = function (event) {
      var _this$props = _this.props,
          onKeyDown = _this$props.onKeyDown,
          disabled = _this$props.disabled,
          name = _this$props.name;
      var open = _this.state.open;


      if (!disabled) {
        var keyCode = event.keyCode;

        /**
         * escape key press
         * hide dropdown list
         */

        if (keyCode === 27) {
          _this._closeDropdown();
        }

        /**
         * space key press
         * hide dropdown or select element in dropdown list
         */
        if (keyCode === 32) {
          event.preventDefault();
          _this._handleSpaceEnterPress(event);
        }

        /**
         * enter key press
         * hide dropdown or select element in dropdown list
         */
        if (keyCode === 13 && open) {
          event.preventDefault();
          _this._handleSpaceEnterPress(event);
        }

        /**
         * up key press
         * select prev element in dropdown list
         */
        if (keyCode === 38) {
          event.preventDefault();
          _this._handleItemHovered('up');
        }

        /**
         * down key press
         * select next element in dropdown list
         */
        if (keyCode === 40) {
          event.preventDefault();
          _this._handleItemHovered('down');
        }
      }

      onKeyDown(event, name);
    }, _this._onClickSelectItem = function (child) {
      return function (e) {
        var _this$props2 = _this.props,
            onChange = _this$props2.onChange,
            name = _this$props2.name;

        var valueChild = child.props.value;

        _this._closeDropdown();

        if (!('value' in _this.props)) {
          _this.textFieldNode.inputNode.inputNode.value = valueChild;
          _this.textFieldNode.validateField();
        }

        onChange(e, valueChild, name, 'select');
      };
    }, _this._onChangeInput = function (e) {
      var _this$props3 = _this.props,
          onChange = _this$props3.onChange,
          name = _this$props3.name;

      var value = e.target.value;

      _this._openDropdown();

      onChange(e, value, name);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Autocomplete, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearTimeout(this._inputBlurTimeout);
      clearTimeout(this._inputFocusTimeout);
      clearTimeout(this._overlayBlurTimeout);
    }
  }, {
    key: '_closeDropdown',
    value: function _closeDropdown() {
      var open = this.state.open;


      if (!open) {
        return;
      }

      this.setState({
        open: false
      });
    }
  }, {
    key: '_openDropdown',
    value: function _openDropdown() {
      var open = this.state.open;


      if (open) {
        return;
      }

      this.setState({
        open: true
      });
    }
  }, {
    key: '_handleSpaceEnterPress',
    value: function _handleSpaceEnterPress(e) {
      var _props = this.props,
          name = _props.name,
          onChange = _props.onChange;
      var _state = this.state,
          valueSelected = _state.valueSelected,
          open = _state.open;


      if (open && valueSelected) {
        if (!('value' in this.props)) {
          this.textFieldNode.inputNode.inputNode.value = valueSelected;
          this.textFieldNode.validateField();
        }

        this._closeDropdown();

        onChange(e, valueSelected, name, 'select');
      }
    }
  }, {
    key: '_handleItemHovered',
    value: function _handleItemHovered(type) {
      var _state2 = this.state,
          valueSelected = _state2.valueSelected,
          open = _state2.open;
      var _childrenValues = this._childrenValues;


      if (!open) return;

      if (!type) {
        this.setState({
          valueSelected: _childrenValues[0]
        }, this._handleScrollToElement);

        return;
      }

      var valueIndex = _childrenValues.indexOf(valueSelected);
      var prevValue = _childrenValues[valueIndex - 1];
      var nextValue = _childrenValues[valueIndex + 1];

      if (type === 'up' && prevValue) {
        this.setState({
          valueSelected: prevValue
        }, this._handleScrollToElement);
      }

      if (type === 'down' && nextValue) {
        this.setState({
          valueSelected: nextValue
        }, this._handleScrollToElement);
      }
    }
  }, {
    key: '_handleScrollToElement',
    value: function _handleScrollToElement() {
      if (this.dropdownNode) {
        this.dropdownNode.scrollToFocusedElement();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          className = _props2.className,
          defaultValue = _props2.defaultValue,
          disabled = _props2.disabled,
          onChange = _props2.onChange,
          onFocus = _props2.onFocus,
          onBlur = _props2.onBlur,
          type = _props2.type,
          value = _props2.value,
          required = _props2.required,
          valid = _props2.valid,
          placeholder = _props2.placeholder,
          name = _props2.name,
          bgType = _props2.bgType,
          color = _props2.color,
          textColor = _props2.textColor,
          colorFocus = _props2.colorFocus,
          size = _props2.size,
          mobileSize = _props2.mobileSize,
          inputProps = _props2.inputProps,
          children = _props2.children,
          validation = _props2.validation,
          placeholderColor = _props2.placeholderColor,
          other = _objectWithoutProperties(_props2, ['className', 'defaultValue', 'disabled', 'onChange', 'onFocus', 'onBlur', 'type', 'value', 'required', 'valid', 'placeholder', 'name', 'bgType', 'color', 'textColor', 'colorFocus', 'size', 'mobileSize', 'inputProps', 'children', 'validation', 'placeholderColor']);

      var _state3 = this.state,
          open = _state3.open,
          valueSelected = _state3.valueSelected;


      this._childrenValues = [];

      var options = Children.map(children, function (child) {
        if (!isValidElement(child)) {
          return null;
        }

        var _child$props = child.props,
            valueChild = _child$props.value,
            disabledChild = _child$props.disabled;

        var selected = false;

        if (!disabledChild) {
          _this2._childrenValues.push(valueChild);
        }

        return cloneElement(child, {
          onClick: disabledChild ? null : _this2._onClickSelectItem(child),
          selected: selected,
          hasFocus: valueSelected === valueChild,
          size: size,
          textColor: textColor,
          colorFocus: colorFocus
        });
      });
      var mustOpen = open && options && options.length > 0;

      return React.createElement(
        'div',
        _extends({
          'data-component': 'autocomplete',
          'data-open': mustOpen,
          'data-disabled': disabled,
          className: classnames('autocomplete', className)
        }, other),
        React.createElement(TextField, {
          placeholder: placeholder,
          onBlur: this._onBlurInput,
          onFocus: this._onFocusInput,
          onChange: this._onChangeInput,
          onKeyDown: this._onKeyDownInput,
          size: size,
          mobileSize: mobileSize,
          textColor: textColor,
          colorFocus: colorFocus,
          bgType: bgType,
          color: color,
          ref: function ref(node) {
            _this2.textFieldNode = node;
          },
          defaultValue: defaultValue,
          value: value,
          disabled: disabled,
          type: type,
          required: required,
          valid: valid,
          name: name,
          inputProps: inputProps,
          autoComplete: 'off',
          validation: validation
        }),
        options && options.length > 0 && React.createElement(
          SelectDropdown,
          {
            className: 'autocomplete_dropdown',
            bgType: bgType,
            color: color,
            colorFocus: colorFocus,
            ref: function ref(node) {
              _this2.dropdownNode = node;
            },
            tabIndex: 0,
            onFocus: this._onFocusOverlay,
            onBlur: this._onBlurOverlay
          },
          options
        )
      );
    }
  }]);

  return Autocomplete;
}(Component);

Autocomplete.propTypes = {
  children: PropTypes.node,
  /**
   * The CSS class name of the wrapper element.
   */
  className: PropTypes.string,
  /**
   * The default input value, useful when not controlling the component.
   */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * If true, the input will be disabled.
   */
  disabled: PropTypes.bool,
  /**
   * Callback fired when the value is changed.
   */
  onChange: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  onKeyDown: PropTypes.func,
  /**
   * Type of the input element.
   */
  type: PropTypes.oneOf(['text', 'password', 'email', 'tel', 'date']),
  /**
   * The input value, required for a controlled component.
   */
  value: PropTypes.oneOfType([// eslint-disable-line
  PropTypes.string, PropTypes.number]),
  /**
   * If true, the input will be required.
   */
  required: PropTypes.bool,
  /**
   * If false, the input will be unvalid styles.
   */
  valid: PropTypes.bool,
  /**
   * The short hint displayed in the input before the user enters a value.
   */
  placeholder: PropTypes.string,
  /**
   * Color for placeholder
   */
  placeholderColor: PropTypes.string,
  /**
   * Name attribute of the input element.
   */
  name: PropTypes.string,
  /**
   * Component type one of `fill` or `stroke`.
   * If `fill` - component will be have background-color from `color` props.
   * If `stroke` - component will be have border-color from `color` props.
   */
  bgType: PropTypes.oneOf(['fill', 'stroke']),
  /**
   * Component color from theme
   */
  color: PropTypes.string,
  /**
   * Component text color from theme
   */
  textColor: PropTypes.string,
  /**
   * Component focus color from theme
   */
  colorFocus: PropTypes.string,
  /**
   * Component size.
   */
  size: PropTypes.oneOf(['medium', 'large']),
  /**
   * Component size for mobile.
   */
  mobileSize: PropTypes.oneOf(['medium', 'large']),
  /**
   * Properties applied to the input element.
   */
  inputProps: PropTypes.oneOfType([PropTypes.object]),
  /**
   * Array with validation types.
   */
  validation: PropTypes.arrayOf(validationPropType)
};
Autocomplete.defaultProps = {
  children: null,
  className: '',
  defaultValue: undefined,
  disabled: false,
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onKeyDown: function onKeyDown() {},

  type: 'text',
  required: false,
  valid: undefined,
  placeholder: undefined,
  placeholderColor: 'grey_4',
  name: undefined,
  bgType: 'fill',
  color: 'light_grey',
  textColor: 'black',
  colorFocus: 'primary',
  size: 'medium',
  mobileSize: undefined,
  inputProps: {},
  validation: undefined
};
export default Autocomplete;
//# sourceMappingURL=index.js.map