{"version":3,"sources":["../../../src/components/text_field/text_field.jsx"],"names":["React","Component","PropTypes","classNames","Input","EyeVisibleIcon","EyeInvisibleIcon","validator","validationPropType","props","propName","componentName","value","rest","error","oneOf","func","TextField","validation","valid","validateValue","defaultValue","state","type","hasValue","nextProps","setState","isValid","inputValue","inputNode","getValue","multiLine","_onTogglePassword","node","passwordButtonNode","_renderPasswordIcon","tabIndex","className","disabled","onChange","onKeyUp","onEnterPress","onChangeType","typeProp","required","validProp","placeholder","name","bgType","color","textColor","colorFocus","size","mobileSize","inputProps","autoComplete","autoFocus","children","placeholderColor","other","text_field_type_password","_onChange","_onEnterPress","_renderPasswordBtn","propTypes","number","string","oneOfType","bool","object","arrayOf","defaultProps","undefined","_onHidePassword","_onShowPassword","e","keyCode","target"],"mappings":"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","file":"text_field.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Input from './input';\nimport EyeVisibleIcon from '../icons/eye_visible';\nimport EyeInvisibleIcon from '../icons/eye_invisible';\nimport validator from '../../utils/validator';\n\n/**\n * Validate `validation` props\n * @param {object} props\n * @param {string} propName\n * @param {string} componentName\n * @returns {object}\n */\nfunction validationPropType(props, propName, componentName, ...rest) {\n  const value = props[propName];\n\n  if (typeof value === 'string') {\n    const error = PropTypes.oneOf([\n      'password',\n      'fullName',\n      'email',\n      'phone',\n      'number',\n      'text',\n      'letters',\n      'date',\n      'cert',\n      'hex',\n      'base64',\n      'objectID',\n      'url',\n    ])(props, propName, componentName, ...rest);\n\n    if (error !== null) {\n      return error;\n    }\n\n    return null;\n  }\n\n  const error = PropTypes.func(props, propName, componentName, ...rest);\n\n  if (error !== null) {\n    return error;\n  }\n\n  return null;\n}\n\n/**\n * TextField component\n */\nexport default class TextField extends Component {\n  /**\n   * Validate string\n   * @param {string} value\n   * @param {array} validation\n   * @return {boolean}\n   */\n  static validateValue(value, validation) {\n    if (validation) {\n      return validator(value, validation);\n    }\n\n    return true;\n  }\n\n  static propTypes = {\n    children: PropTypes.node,\n    tabIndex: PropTypes.number,\n    /**\n     * The CSS class name of the wrapper element.\n     */\n    className: PropTypes.string,\n    /**\n     * The default input value, useful when not controlling the component.\n     */\n    defaultValue: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * If true, the input will be disabled.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * If true, a textarea element will be rendered.\n     */\n    multiLine: PropTypes.bool,\n    /**\n     * Callback fired when the value is changed.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback fired when key up.\n     */\n    onKeyUp: PropTypes.func,\n    /**\n     * Callback fired when pressed enter key.\n     */\n    onEnterPress: PropTypes.func,\n    /**\n     * Callback fired when field type changed.\n     */\n    onChangeType: PropTypes.func,\n    /**\n     * Type of the input element.\n     */\n    type: PropTypes.oneOf([\n      'text',\n      'password',\n      'email',\n      'tel',\n      'date',\n    ]),\n    /**\n     * The input value, required for a controlled component.\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * If true, the input will be required.\n     */\n    required: PropTypes.bool,\n    /**\n     * If false, the input will be unvalid styles.\n     */\n    valid: PropTypes.bool,\n    /**\n     * The short hint displayed in the input before the user enters a value.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * Color for placeholder\n     */\n    placeholderColor: PropTypes.string,\n    /**\n     * Name attribute of the input element.\n     */\n    name: PropTypes.string,\n    /**\n     * Component type one of `fill` or `stroke`.\n     * If `fill` - component will be have background-color from `color` props.\n     * If `stroke` - component will be have border-color from `color` props.\n     */\n    bgType: PropTypes.oneOf(['fill', 'stroke']),\n    /**\n     * Component color from theme\n     */\n    color: PropTypes.string,\n    /**\n     * Component text color from theme\n     */\n    textColor: PropTypes.string,\n    /**\n     * Component focus color from theme\n     */\n    colorFocus: PropTypes.string,\n    /**\n     * Component size.\n     */\n    size: PropTypes.oneOf(['medium', 'large']),\n    /**\n     * Component size for mobile.\n     */\n    mobileSize: PropTypes.oneOf(['medium', 'large']),\n    /**\n     * Properties applied to the input element.\n     */\n    inputProps: PropTypes.oneOfType([\n      PropTypes.object,\n    ]),\n    /**\n     * This property helps users to fill forms faster, especially on mobile devices.\n     * The name can be confusing, as it's more like an autofill.\n     */\n    autoComplete: PropTypes.string,\n    /**\n     * If true, the input will be focused during the first mount.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * Array with validation types.\n     */\n    validation: PropTypes.arrayOf(validationPropType),\n  };\n\n  static defaultProps = {\n    children: null,\n    tabIndex: 0,\n    className: '',\n    defaultValue: undefined,\n    disabled: false,\n    multiLine: false,\n    onChange() {},\n    onKeyUp() {},\n    onEnterPress() {},\n    onChangeType() {},\n    type: 'text',\n    value: undefined,\n    required: false,\n    valid: undefined,\n    placeholder: undefined,\n    placeholderColor: 'grey_4',\n    name: undefined,\n    bgType: 'fill',\n    color: 'light_grey',\n    textColor: 'black',\n    colorFocus: 'primary',\n    size: 'medium',\n    mobileSize: undefined,\n    inputProps: {},\n    autoComplete: undefined,\n    autoFocus: false,\n    validation: undefined,\n  };\n\n  constructor(props) {\n    super(props);\n\n    let valid;\n\n    if (typeof props.valid === 'boolean') {\n      valid = props.valid;\n    } else {\n      valid = TextField.validateValue(\n        props.value || props.defaultValue,\n        props.validation,\n      );\n    }\n\n    this.state = {\n      type: props.type,\n      valid,\n      hasValue: !!(props.value || props.defaultValue),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { value } = this.props;\n\n    if (typeof nextProps.valid === 'boolean') {\n      return this.setState({\n        valid: nextProps.valid,\n        hasValue: !!nextProps.value,\n      });\n    }\n\n    if (value !== nextProps.value) {\n      this.setState({\n        valid: TextField.validateValue(nextProps.value, nextProps.validation),\n        hasValue: !!nextProps.value,\n      });\n    }\n\n    return true;\n  }\n\n  /**\n   * Set valid state\n   * @param {boolean} value\n   */\n  setValid(value) {\n    const { valid } = this.state;\n\n    if (valid !== value && typeof value === 'boolean') {\n      this.setState({\n        valid: value,\n      });\n    }\n  }\n\n  inputNode = null;\n  passwordButtonNode = null;\n\n  /**\n   * onTogglePassword handler\n   */\n  _onTogglePassword = () => {\n    const { type } = this.state;\n\n    if (type === 'text') {\n      this._onHidePassword();\n    } else {\n      this._onShowPassword();\n    }\n  };\n\n  /**\n   * onShowPassword handler\n   */\n  _onShowPassword = () => {\n    const { onChangeType } = this.props;\n\n    this.setState({\n      type: 'text',\n    });\n\n    onChangeType('text');\n  }\n\n  /**\n   * onHidePassword handler\n   */\n  _onHidePassword = () => {\n    const { onChangeType } = this.props;\n\n    this.setState({\n      type: 'password',\n    });\n\n    onChangeType('password');\n  }\n\n  /**\n   * onEnterPress handler\n   * @param {SytheticEvent} e\n   */\n  _onEnterPress = (e) => {\n    const { onKeyUp, onEnterPress } = this.props;\n    const { keyCode } = e;\n\n    if (keyCode === 13 && onEnterPress) {\n      onEnterPress(e);\n    }\n\n    if (onKeyUp) {\n      onKeyUp(e);\n    }\n  };\n\n  /**\n   * onChange handler\n   * @param {SytheticEvent} e\n   */\n  _onChange = (e) => {\n    const { onChange, valid: validProp } = this.props;\n    const { value } = e.target;\n    const valid = this.isValid(value);\n\n    if (typeof validProp !== 'boolean') {\n      this.setState({\n        valid,\n        hasValue: !!value,\n      });\n    }\n\n    if (onChange) {\n      onChange(e, valid);\n    }\n  };\n\n  /**\n   * Validate field value\n   */\n  validateField() {\n    const valid = this.isValid();\n\n    this.setState({\n      valid,\n    });\n  }\n\n  /**\n   * Return 'valid' state\n   * @return {boolean}\n   */\n  isValid(value) {\n    const { validation, valid } = this.props;\n    const inputValue = value || this.inputNode.getValue();\n\n    if (typeof valid === 'boolean') {\n      return valid;\n    }\n\n    return TextField.validateValue(inputValue, validation);\n  }\n\n  /**\n   * renderPasswordIcon\n   * @return {ReactElement} markup\n   */\n  _renderPasswordIcon() {\n    const { type } = this.state;\n\n    return type === 'password' ? (\n      <EyeInvisibleIcon\n        className=\"text_field_icon_password\"\n      />\n    ) : (\n      <EyeVisibleIcon\n        className=\"text_field_icon_password\"\n      />\n    );\n  }\n\n  /**\n   * renderPasswordBtn\n   * @return {ReactElement} markup\n   */\n  _renderPasswordBtn() {\n    const { multiLine, type } = this.props;\n\n    return (!multiLine && type === 'password') && (\n      <div\n        onClick={this._onTogglePassword}\n        className=\"text_field_button_password\"\n        ref={(node) => { this.passwordButtonNode = node; }}\n      >\n        {this._renderPasswordIcon()}\n      </div>\n    );\n  }\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const {\n      tabIndex,\n      className,\n      defaultValue,\n      disabled,\n      multiLine,\n      onChange,\n      onKeyUp,\n      onEnterPress,\n      onChangeType,\n      type: typeProp,\n      value,\n      required,\n      valid: validProp,\n      placeholder,\n      name,\n      bgType,\n      color,\n      textColor,\n      colorFocus,\n      size,\n      mobileSize,\n      inputProps,\n      autoComplete,\n      autoFocus,\n      children,\n      validation,\n      placeholderColor,\n      ...other\n    } = this.props;\n    const {\n      type,\n      valid,\n      hasValue,\n    } = this.state;\n\n    return (\n      <label\n        data-component=\"text_field\"\n        data-disabled={disabled}\n        data-valid={hasValue ? valid : true}\n        className={classNames(\n          'text_field',\n          className,\n        )}\n        {...other}\n      >\n        <Input\n          ref={(node) => { this.inputNode = node; }}\n          tabIndex={tabIndex}\n          defaultValue={defaultValue}\n          disabled={disabled}\n          multiLine={multiLine}\n          type={type}\n          value={value}\n          required={required}\n          valid={hasValue ? valid : true}\n          placeholder={placeholder}\n          name={name}\n          bgType={bgType}\n          color={color}\n          textColor={textColor}\n          colorFocus={colorFocus}\n          placeholderColor={placeholderColor}\n          size={size}\n          mobileSize={mobileSize}\n          inputProps={{\n            ...inputProps,\n            className: classNames(\n              inputProps.className,\n              {\n                text_field_type_password: typeProp === 'password',\n              },\n            ),\n          }}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          onChange={this._onChange}\n          onKeyUp={this._onEnterPress}\n        >\n          {this._renderPasswordBtn()}\n          {children}\n        </Input>\n      </label>\n    );\n  }\n}\n"]}