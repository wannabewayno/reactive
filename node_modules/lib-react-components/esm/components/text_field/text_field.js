var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import Input from './input';
import EyeVisibleIcon from '../icons/eye_visible';
import EyeInvisibleIcon from '../icons/eye_invisible';
import validator from '../../utils/validator';

/**
 * Validate `validation` props
 * @param {object} props
 * @param {string} propName
 * @param {string} componentName
 * @returns {object}
 */
function validationPropType(props, propName, componentName) {
  var value = props[propName];

  for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  if (typeof value === 'string') {
    var _error = PropTypes.oneOf(['password', 'fullName', 'email', 'phone', 'number', 'text', 'letters', 'date', 'cert', 'hex', 'base64', 'objectID', 'url']).apply(undefined, [props, propName, componentName].concat(rest));

    if (_error !== null) {
      return _error;
    }

    return null;
  }

  var error = PropTypes.func.apply(PropTypes, [props, propName, componentName].concat(rest));

  if (error !== null) {
    return error;
  }

  return null;
}

/**
 * TextField component
 */

var TextField = function (_Component) {
  _inherits(TextField, _Component);

  _createClass(TextField, null, [{
    key: 'validateValue',

    /**
     * Validate string
     * @param {string} value
     * @param {array} validation
     * @return {boolean}
     */
    value: function validateValue(value, validation) {
      if (validation) {
        return validator(value, validation);
      }

      return true;
    }
  }]);

  function TextField(props) {
    _classCallCheck(this, TextField);

    var _this = _possibleConstructorReturn(this, (TextField.__proto__ || Object.getPrototypeOf(TextField)).call(this, props));

    _initialiseProps.call(_this);

    var valid = void 0;

    if (typeof props.valid === 'boolean') {
      valid = props.valid;
    } else {
      valid = TextField.validateValue(props.value || props.defaultValue, props.validation);
    }

    _this.state = {
      type: props.type,
      valid: valid,
      hasValue: !!(props.value || props.defaultValue)
    };
    return _this;
  }

  _createClass(TextField, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var value = this.props.value;


      if (typeof nextProps.valid === 'boolean') {
        return this.setState({
          valid: nextProps.valid,
          hasValue: !!nextProps.value
        });
      }

      if (value !== nextProps.value) {
        this.setState({
          valid: TextField.validateValue(nextProps.value, nextProps.validation),
          hasValue: !!nextProps.value
        });
      }

      return true;
    }

    /**
     * Set valid state
     * @param {boolean} value
     */

  }, {
    key: 'setValid',
    value: function setValid(value) {
      var valid = this.state.valid;


      if (valid !== value && typeof value === 'boolean') {
        this.setState({
          valid: value
        });
      }
    }

    /**
     * onTogglePassword handler
     */


    /**
     * onShowPassword handler
     */


    /**
     * onHidePassword handler
     */


    /**
     * onEnterPress handler
     * @param {SytheticEvent} e
     */


    /**
     * onChange handler
     * @param {SytheticEvent} e
     */

  }, {
    key: 'validateField',


    /**
     * Validate field value
     */
    value: function validateField() {
      var valid = this.isValid();

      this.setState({
        valid: valid
      });
    }

    /**
     * Return 'valid' state
     * @return {boolean}
     */

  }, {
    key: 'isValid',
    value: function isValid(value) {
      var _props = this.props,
          validation = _props.validation,
          valid = _props.valid;

      var inputValue = value || this.inputNode.getValue();

      if (typeof valid === 'boolean') {
        return valid;
      }

      return TextField.validateValue(inputValue, validation);
    }

    /**
     * renderPasswordIcon
     * @return {ReactElement} markup
     */

  }, {
    key: '_renderPasswordIcon',
    value: function _renderPasswordIcon() {
      var type = this.state.type;


      return type === 'password' ? React.createElement(EyeInvisibleIcon, {
        className: 'text_field_icon_password'
      }) : React.createElement(EyeVisibleIcon, {
        className: 'text_field_icon_password'
      });
    }

    /**
     * renderPasswordBtn
     * @return {ReactElement} markup
     */

  }, {
    key: '_renderPasswordBtn',
    value: function _renderPasswordBtn() {
      var _this2 = this;

      var _props2 = this.props,
          multiLine = _props2.multiLine,
          type = _props2.type;


      return !multiLine && type === 'password' && React.createElement(
        'div',
        {
          onClick: this._onTogglePassword,
          className: 'text_field_button_password',
          ref: function ref(node) {
            _this2.passwordButtonNode = node;
          }
        },
        this._renderPasswordIcon()
      );
    }

    /**
     * render
     * @return {ReactElement} markup
     */

  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props3 = this.props,
          tabIndex = _props3.tabIndex,
          className = _props3.className,
          defaultValue = _props3.defaultValue,
          disabled = _props3.disabled,
          multiLine = _props3.multiLine,
          onChange = _props3.onChange,
          onKeyUp = _props3.onKeyUp,
          onEnterPress = _props3.onEnterPress,
          onChangeType = _props3.onChangeType,
          typeProp = _props3.type,
          value = _props3.value,
          required = _props3.required,
          validProp = _props3.valid,
          placeholder = _props3.placeholder,
          name = _props3.name,
          bgType = _props3.bgType,
          color = _props3.color,
          textColor = _props3.textColor,
          colorFocus = _props3.colorFocus,
          size = _props3.size,
          mobileSize = _props3.mobileSize,
          inputProps = _props3.inputProps,
          autoComplete = _props3.autoComplete,
          autoFocus = _props3.autoFocus,
          children = _props3.children,
          validation = _props3.validation,
          placeholderColor = _props3.placeholderColor,
          other = _objectWithoutProperties(_props3, ['tabIndex', 'className', 'defaultValue', 'disabled', 'multiLine', 'onChange', 'onKeyUp', 'onEnterPress', 'onChangeType', 'type', 'value', 'required', 'valid', 'placeholder', 'name', 'bgType', 'color', 'textColor', 'colorFocus', 'size', 'mobileSize', 'inputProps', 'autoComplete', 'autoFocus', 'children', 'validation', 'placeholderColor']);

      var _state = this.state,
          type = _state.type,
          valid = _state.valid,
          hasValue = _state.hasValue;


      return React.createElement(
        'label',
        _extends({
          'data-component': 'text_field',
          'data-disabled': disabled,
          'data-valid': hasValue ? valid : true,
          className: classNames('text_field', className)
        }, other),
        React.createElement(
          Input,
          {
            ref: function ref(node) {
              _this3.inputNode = node;
            },
            tabIndex: tabIndex,
            defaultValue: defaultValue,
            disabled: disabled,
            multiLine: multiLine,
            type: type,
            value: value,
            required: required,
            valid: hasValue ? valid : true,
            placeholder: placeholder,
            name: name,
            bgType: bgType,
            color: color,
            textColor: textColor,
            colorFocus: colorFocus,
            placeholderColor: placeholderColor,
            size: size,
            mobileSize: mobileSize,
            inputProps: _extends({}, inputProps, {
              className: classNames(inputProps.className, {
                text_field_type_password: typeProp === 'password'
              })
            }),
            autoComplete: autoComplete,
            autoFocus: autoFocus,
            onChange: this._onChange,
            onKeyUp: this._onEnterPress
          },
          this._renderPasswordBtn(),
          children
        )
      );
    }
  }]);

  return TextField;
}(Component);

TextField.propTypes = {
  children: PropTypes.node,
  tabIndex: PropTypes.number,
  /**
   * The CSS class name of the wrapper element.
   */
  className: PropTypes.string,
  /**
   * The default input value, useful when not controlling the component.
   */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * If true, the input will be disabled.
   */
  disabled: PropTypes.bool,
  /**
   * If true, a textarea element will be rendered.
   */
  multiLine: PropTypes.bool,
  /**
   * Callback fired when the value is changed.
   */
  onChange: PropTypes.func,
  /**
   * Callback fired when key up.
   */
  onKeyUp: PropTypes.func,
  /**
   * Callback fired when pressed enter key.
   */
  onEnterPress: PropTypes.func,
  /**
   * Callback fired when field type changed.
   */
  onChangeType: PropTypes.func,
  /**
   * Type of the input element.
   */
  type: PropTypes.oneOf(['text', 'password', 'email', 'tel', 'date']),
  /**
   * The input value, required for a controlled component.
   */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * If true, the input will be required.
   */
  required: PropTypes.bool,
  /**
   * If false, the input will be unvalid styles.
   */
  valid: PropTypes.bool,
  /**
   * The short hint displayed in the input before the user enters a value.
   */
  placeholder: PropTypes.string,
  /**
   * Color for placeholder
   */
  placeholderColor: PropTypes.string,
  /**
   * Name attribute of the input element.
   */
  name: PropTypes.string,
  /**
   * Component type one of `fill` or `stroke`.
   * If `fill` - component will be have background-color from `color` props.
   * If `stroke` - component will be have border-color from `color` props.
   */
  bgType: PropTypes.oneOf(['fill', 'stroke']),
  /**
   * Component color from theme
   */
  color: PropTypes.string,
  /**
   * Component text color from theme
   */
  textColor: PropTypes.string,
  /**
   * Component focus color from theme
   */
  colorFocus: PropTypes.string,
  /**
   * Component size.
   */
  size: PropTypes.oneOf(['medium', 'large']),
  /**
   * Component size for mobile.
   */
  mobileSize: PropTypes.oneOf(['medium', 'large']),
  /**
   * Properties applied to the input element.
   */
  inputProps: PropTypes.oneOfType([PropTypes.object]),
  /**
   * This property helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   */
  autoComplete: PropTypes.string,
  /**
   * If true, the input will be focused during the first mount.
   */
  autoFocus: PropTypes.bool,
  /**
   * Array with validation types.
   */
  validation: PropTypes.arrayOf(validationPropType)
};
TextField.defaultProps = {
  children: null,
  tabIndex: 0,
  className: '',
  defaultValue: undefined,
  disabled: false,
  multiLine: false,
  onChange: function onChange() {},
  onKeyUp: function onKeyUp() {},
  onEnterPress: function onEnterPress() {},
  onChangeType: function onChangeType() {},

  type: 'text',
  value: undefined,
  required: false,
  valid: undefined,
  placeholder: undefined,
  placeholderColor: 'grey_4',
  name: undefined,
  bgType: 'fill',
  color: 'light_grey',
  textColor: 'black',
  colorFocus: 'primary',
  size: 'medium',
  mobileSize: undefined,
  inputProps: {},
  autoComplete: undefined,
  autoFocus: false,
  validation: undefined
};

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.inputNode = null;
  this.passwordButtonNode = null;

  this._onTogglePassword = function () {
    var type = _this4.state.type;


    if (type === 'text') {
      _this4._onHidePassword();
    } else {
      _this4._onShowPassword();
    }
  };

  this._onShowPassword = function () {
    var onChangeType = _this4.props.onChangeType;


    _this4.setState({
      type: 'text'
    });

    onChangeType('text');
  };

  this._onHidePassword = function () {
    var onChangeType = _this4.props.onChangeType;


    _this4.setState({
      type: 'password'
    });

    onChangeType('password');
  };

  this._onEnterPress = function (e) {
    var _props4 = _this4.props,
        onKeyUp = _props4.onKeyUp,
        onEnterPress = _props4.onEnterPress;
    var keyCode = e.keyCode;


    if (keyCode === 13 && onEnterPress) {
      onEnterPress(e);
    }

    if (onKeyUp) {
      onKeyUp(e);
    }
  };

  this._onChange = function (e) {
    var _props5 = _this4.props,
        onChange = _props5.onChange,
        validProp = _props5.valid;
    var value = e.target.value;

    var valid = _this4.isValid(value);

    if (typeof validProp !== 'boolean') {
      _this4.setState({
        valid: valid,
        hasValue: !!value
      });
    }

    if (onChange) {
      onChange(e, valid);
    }
  };
};

export default TextField;
//# sourceMappingURL=text_field.js.map