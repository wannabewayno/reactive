{"version":3,"sources":["../../../src/components/text_field/input.jsx"],"names":["React","PureComponent","PropTypes","classNames","RequiredIcon","Input","getValue","inputNode","value","setFocus","focus","clearValue","required","props","tabIndex","className","defaultValue","disabled","multiLine","onChange","type","valid","placeholder","placeholderColor","children","name","bgType","color","textColor","colorFocus","propsSize","size","mobileSize","inputProps","autoComplete","autoFocus","other","device","context","classNameInput","otherInputProps","Component","defaultProps","node","fill_white","_renderRequiredIcon","propTypes","number","string","oneOfType","bool","func","oneOf","object","contextTypes","undefined"],"mappings":"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","file":"input.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport RequiredIcon from '../icons/required';\n\n/**\n * Input component\n */\nexport default class Input extends PureComponent {\n  static propTypes = {\n    /**\n     * Element tabIndex.\n     */\n    tabIndex: PropTypes.number,\n    /**\n     * The CSS class name of the wrapper element.\n     */\n    className: PropTypes.string,\n    /**\n     * The default input value, useful when not controlling the component.\n     */\n    defaultValue: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * If true, the input will be disabled.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * If true, a textarea element will be rendered.\n     */\n    multiLine: PropTypes.bool,\n    /**\n     * Callback fired when the value is changed.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Type of the input element. It should be a valid HTML5 input type.\n     */\n    type: PropTypes.string,\n    /**\n     * The input value, required for a controlled component.\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * If true, the input will be required.\n     */\n    required: PropTypes.bool,\n    /**\n     * If false, the input will be unvalid styles.\n     */\n    valid: PropTypes.bool,\n    /**\n     * The short hint displayed in the input before the user enters a value.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * Color for placeholder\n     */\n    placeholderColor: PropTypes.string,\n    // label: PropTypes.string,\n    /**\n     * This is what will be displayed in wrapper component\n     */\n    children: PropTypes.node,\n    /**\n     * Name attribute of the input element.\n     */\n    name: PropTypes.string,\n    /**\n     * Component type one of `fill` or `stroke`.\n     * If `fill` - component will be have background-color from `color` props.\n     * If `stroke` - component will be have border-color from `color` props.\n     */\n    bgType: PropTypes.oneOf(['fill', 'stroke']),\n    /**\n     * Component color from theme\n     */\n    color: PropTypes.string,\n    /**\n     * Component text color from theme\n     */\n    textColor: PropTypes.string,\n    /**\n     * Component focus color from theme\n     */\n    colorFocus: PropTypes.string,\n    /**\n     * Component size.\n     */\n    size: PropTypes.oneOf(['medium', 'large']),\n    /**\n     * Component size for mobile.\n     */\n    mobileSize: PropTypes.oneOf(['medium', 'large']),\n    /**\n     * Properties applied to the input element.\n     */\n    inputProps: PropTypes.oneOfType([\n      PropTypes.object,\n    ]),\n    /**\n     * This property helps users to fill forms faster, especially on mobile devices.\n     * The name can be confusing, as it's more like an autofill.\n     */\n    autoComplete: PropTypes.string,\n    /**\n     * If true, the input will be focused during the first mount.\n     */\n    autoFocus: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    device: PropTypes.object,\n  };\n\n  static defaultProps = {\n    tabIndex: 0,\n    className: '',\n    defaultValue: undefined,\n    disabled: false,\n    multiLine: false,\n    onChange: null,\n    type: 'text',\n    value: undefined,\n    required: false,\n    valid: true,\n    placeholder: undefined,\n    placeholderColor: 'grey_4',\n    // label: undefined,\n    children: null,\n    name: undefined,\n    bgType: 'fill',\n    color: 'light_grey',\n    textColor: 'black',\n    colorFocus: 'primary',\n    size: 'medium',\n    mobileSize: undefined,\n    inputProps: {},\n    autoComplete: undefined,\n    autoFocus: false,\n  };\n\n  /**\n   * Return input value\n   * @return {string}\n   */\n  getValue = () => {\n    const { inputNode } = this;\n\n    return inputNode.value;\n  };\n\n  /**\n   * Set focus to input\n   */\n  setFocus = () => {\n    const { inputNode } = this;\n\n    inputNode.focus();\n  };\n\n  inputNode = null;\n\n  /**\n   * Clear input value\n   */\n  clearValue = () => {\n    const { inputNode } = this;\n\n    inputNode.value = '';\n  };\n\n  /**\n   * Render required icon element\n   * @return {ReactElement} markup\n   */\n  _renderRequiredIcon() {\n    const { required } = this.props;\n\n    return required && (\n      <RequiredIcon\n        className=\"input_required_icon fill_wrong\"\n      />\n    );\n  }\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const {\n      tabIndex,\n      className,\n      defaultValue,\n      disabled,\n      multiLine,\n      onChange,\n      type,\n      value,\n      required,\n      valid,\n      placeholder,\n      placeholderColor,\n      // label,\n      children,\n      name,\n      bgType,\n      color,\n      textColor,\n      colorFocus,\n      size: propsSize,\n      mobileSize,\n      inputProps,\n      autoComplete,\n      autoFocus,\n      ...other\n    } = this.props;\n    const { device } = this.context;\n    const {\n      className: classNameInput,\n      ...otherInputProps\n    } = inputProps;\n    const Component = multiLine ? 'textarea' : 'input';\n\n    // {label && (\n    //   <div\n    //     onClick={this.setFocus}\n    //     className={s.label}\n    //     ref={(node) => { this.labelNode = node; }}\n    //   >\n    //     {label}\n    //   </div>\n    // )}\n\n    let size = propsSize || Input.defaultProps.size;\n\n    if (device && mobileSize) {\n      if (device.type === 'mobile') {\n        size = mobileSize;\n      }\n    }\n\n    return (\n      <div\n        data-component=\"input\"\n        data-type={bgType}\n        data-valid={valid}\n        data-disabled={disabled}\n        className={classNames(\n          'input',\n          className,\n        )}\n        {...other}\n      >\n        <Component\n          ref={(node) => { this.inputNode = node; }}\n          type={multiLine ? null : type}\n          className={classNames(\n            'input_field',\n            'round_small',\n            [`input_field_${size}`],\n            [`stroke_${color}`],\n            {\n              fill_white: bgType === 'stroke',\n              [`fill_${color}`]: bgType === 'fill',\n              [`text_${textColor}`]: textColor,\n            },\n            [`input_field_focus_${colorFocus}`],\n            [`input_placeholder_color_${placeholderColor}`],\n            classNameInput,\n          )}\n          tabIndex={tabIndex}\n          defaultValue={defaultValue}\n          disabled={disabled}\n          onChange={onChange}\n          value={value}\n          required={required}\n          placeholder={placeholder}\n          name={name}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          {...otherInputProps}\n        />\n        {this._renderRequiredIcon()}\n        {children}\n      </div>\n    );\n  }\n}\n"]}