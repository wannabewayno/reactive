var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import ButtonGroup from '../button_group';
import Button from '../button';
import TooltipPopper from '../tooltip/tooltip_popper';
import Portal from '../../containers/portal';
import Typography, { textTypePropType } from '../typography';
import SelectArrowIcon from '../icons/select_arrow';

/**
 * Check if node is root element
 * @param {object} root
 * @param {object} n
 */
function contains(root, n) {
  var node = n;

  while (node) {
    if (node === root) {
      return true;
    }
    node = node.parentNode;
  }

  return false;
}

/**
 * ButtonSplit component
 */

var ButtonSplit = function (_React$Component) {
  _inherits(ButtonSplit, _React$Component);

  function ButtonSplit(props) {
    _classCallCheck(this, ButtonSplit);

    var _this = _possibleConstructorReturn(this, (ButtonSplit.__proto__ || Object.getPrototypeOf(ButtonSplit)).call(this, props));

    _this.onDocumentClick = function (e) {
      var open = _this.state.open;

      var root = findDOMNode(_this.root.current); // eslint-disable-line
      var tooltipRoot = document.querySelector('[data-component="tooltip_popper"]');
      var target = e.target;


      if (tooltipRoot) {
        var isInRoot = contains(root, target);
        var isInTooltip = contains(tooltipRoot, target);

        if (!isInRoot && !isInTooltip && open) {
          _this.setOpen(false);
        }
      }
    };

    _this.onKeyUp = function (e) {
      var open = _this.state.open;


      if (e.code === 'Escape' && open) {
        _this.setOpen(false);
      }
    };

    _this.onClickButtonSplit = function () {
      var open = _this.state.open;


      _this.setOpen(!open);
    };

    _this.setOpen = function (condition) {
      _this.setState({
        open: condition
      });
    };

    _this.renderActions = function () {
      var actions = _this.props.actions;


      return actions.map(function (action) {
        var text = action.text,
            _onClick = action.onClick,
            disabled = action.disabled,
            href = action.href,
            target = action.target,
            other = _objectWithoutProperties(action, ['text', 'onClick', 'disabled', 'href', 'target']);

        var Component = href ? 'a' : 'button';

        return React.createElement(
          Component,
          {
            key: text,
            onClick: function onClick(e) {
              return _this.onClickAction(e, _onClick);
            },
            href: href,
            target: href ? target : undefined,
            disabled: disabled,
            className: 'button_split_action'
          },
          React.createElement(
            Typography,
            _extends({
              type: 'b2'
            }, other),
            text
          )
        );
      });
    };

    _this.renderTooltip = function () {
      var open = _this.state.open;
      var _this$props = _this.props,
          actions = _this$props.actions,
          disabled = _this$props.disabled;


      if (!actions.length) {
        return null;
      }

      return React.createElement(
        React.Fragment,
        null,
        React.createElement(
          Button,
          {
            componentRef: _this.root,
            onClick: _this.onClickButtonSplit,
            className: 'button_split',
            disabled: disabled
          },
          React.createElement(SelectArrowIcon, {
            className: 'button_split_action_icon'
          })
        ),
        React.createElement(
          TooltipPopper,
          {
            placement: 'bottom-end',
            color: 'white',
            classNameTooltip: 'button_split_tooltip',
            classNameTooltipContent: 'button_split_tooltip_content',
            open: open,
            referenceElement: _this.root.current || {},
            positionFixed: true,
            usePortal: true,
            preventOverflow: false
          },
          _this.renderActions()
        )
      );
    };

    _this.renderOverlay = function () {
      var overlay = _this.props.overlay;
      var open = _this.state.open;


      if (overlay) {
        return React.createElement(
          Portal,
          null,
          React.createElement('div', {
            'data-open': open,
            className: classnames('tooltip_overlay', 'fill_black'),
            style: {
              opacity: open ? 0.3 : 0
            }
          })
        );
      }

      return null;
    };

    _this.state = {
      open: false
    };

    _this.root = React.createRef();
    return _this;
  }

  _createClass(ButtonSplit, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.document.addEventListener('mousedown', this.onDocumentClick);
      window.document.addEventListener('keyup', this.onKeyUp);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.document.removeEventListener('mousedown', this.onDocumentClick);
      window.document.removeEventListener('keyup', this.onKeyUp);
    }

    /**
     * onDocumentClick handler
     * @param {SytheticEvent} e
     */

  }, {
    key: 'onClickAction',


    /**
     * onActionClick handler
     * @param {function} handler
     * @param {SyntheticEvent} event
     */
    value: function onClickAction(event, handler) {
      if (handler) {
        handler(event);
      }

      this.setOpen(false);
    }

    /**
     * setOpen handler
     * @param {boolean} condition
     */

  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          actions = _props.actions,
          children = _props.children,
          overlay = _props.overlay,
          className = _props.className,
          bgType = _props.bgType,
          color = _props.color,
          textColor = _props.textColor,
          size = _props.size,
          disabled = _props.disabled,
          full = _props.full,
          other = _objectWithoutProperties(_props, ['actions', 'children', 'overlay', 'className', 'bgType', 'color', 'textColor', 'size', 'disabled', 'full']);

      return React.createElement(
        ButtonGroup,
        {
          className: className,
          bgType: bgType,
          color: color,
          textColor: textColor,
          size: size,
          disabled: disabled,
          full: full
        },
        React.createElement(
          Button,
          other,
          children
        ),
        this.renderTooltip(),
        this.renderOverlay()
      );
    }
  }]);

  return ButtonSplit;
}(React.Component);

ButtonSplit.propTypes = {
  /**
   * Inner text for root button
   */
  children: PropTypes.string.isRequired,
  /**
   * The CSS class name of the root element.
   */
  className: PropTypes.string,
  /**
   * Component type one of `fill` or `stroke`.
   * If `fill` - component will have background and border from `color` props.
   * If `stroke` - component will have border from `color` props and transparent background.
   * If `clear` - component will have transparent border and transparent background.
   */
  bgType: PropTypes.oneOf(['fill', 'stroke', 'clear']),
  /**
   * Button component color from theme
   */
  color: PropTypes.string,
  /**
   * Button component text color from theme
   */
  textColor: PropTypes.string,
  /**
   * Button component size
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /**
   * Disables the buttons if set to true
   */
  disabled: PropTypes.bool,
  /**
   * Component full-width.
   */
  full: PropTypes.bool,
  /**
   * Actions list to render in collapsed state.
   */
  actions: PropTypes.arrayOf(PropTypes.shape({
    /**
     * This is what will be displayed inside the button
     */
    text: PropTypes.string.isRequired,
    /**
     * The URL to link to when the button is clicked
     */
    href: PropTypes.string,
    /**
     * The target to link
     */
    target: PropTypes.string,
    /**
     * Disables the button if set to true
     */
    disabled: PropTypes.bool,
    /**
     * Callback function fired when the button is clicked
     */
    onClick: PropTypes.func,
    /**
     * Typography type
     */
    type: textTypePropType,
    /**
     * Typography type for tablet
     */
    tabletType: textTypePropType,
    /**
     * Typography type for mobile
     */
    mobileType: textTypePropType,
    /**
     * Component color from theme
     */
    color: PropTypes.string,
    /**
     * Component content aligment
     */
    align: PropTypes.oneOf(['left', 'center', 'right', 'auto']),
    /**
     * The CSS class name of the root element
     */
    className: PropTypes.string
  })),
  /**
   * If `true`, the tooltip overlay will show for opened tooltip.
   */
  overlay: PropTypes.bool
};
ButtonSplit.defaultProps = {
  className: undefined,
  actions: [],
  bgType: 'fill',
  color: 'primary',
  textColor: 'white',
  size: 'medium',
  disabled: false,
  overlay: false,
  full: false
};
export default ButtonSplit;
//# sourceMappingURL=index.js.map