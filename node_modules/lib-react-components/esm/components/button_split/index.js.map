{"version":3,"sources":["../../../src/components/button_split/index.jsx"],"names":["React","findDOMNode","PropTypes","classnames","ButtonGroup","Button","TooltipPopper","Portal","Typography","textTypePropType","SelectArrowIcon","contains","root","n","node","parentNode","ButtonSplit","props","onDocumentClick","e","open","state","current","tooltipRoot","document","querySelector","target","isInRoot","isInTooltip","setOpen","onKeyUp","code","onClickButtonSplit","condition","setState","renderActions","actions","map","action","text","onClick","disabled","href","other","Component","onClickAction","undefined","renderTooltip","length","renderOverlay","overlay","opacity","createRef","window","addEventListener","removeEventListener","event","handler","children","className","bgType","color","textColor","size","full","propTypes","string","isRequired","oneOf","bool","arrayOf","shape","func","type","tabletType","mobileType","align","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport ButtonGroup from '../button_group';\nimport Button from '../button';\nimport TooltipPopper from '../tooltip/tooltip_popper';\nimport Portal from '../../containers/portal';\nimport Typography, { textTypePropType } from '../typography';\nimport SelectArrowIcon from '../icons/select_arrow';\n\n/**\n * Check if node is root element\n * @param {object} root\n * @param {object} n\n */\nfunction contains(root, n) {\n  let node = n;\n\n  while (node) {\n    if (node === root) {\n      return true;\n    }\n    node = node.parentNode;\n  }\n\n  return false;\n}\n\n/**\n * ButtonSplit component\n */\nexport default class ButtonSplit extends React.Component {\n  static propTypes = {\n    /**\n     * Inner text for root button\n     */\n    children: PropTypes.string.isRequired,\n    /**\n     * The CSS class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Component type one of `fill` or `stroke`.\n     * If `fill` - component will have background and border from `color` props.\n     * If `stroke` - component will have border from `color` props and transparent background.\n     * If `clear` - component will have transparent border and transparent background.\n     */\n    bgType: PropTypes.oneOf(['fill', 'stroke', 'clear']),\n    /**\n     * Button component color from theme\n     */\n    color: PropTypes.string,\n    /**\n     * Button component text color from theme\n     */\n    textColor: PropTypes.string,\n    /**\n     * Button component size\n     */\n    size: PropTypes.oneOf(['small', 'medium', 'large']),\n    /**\n     * Disables the buttons if set to true\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Component full-width.\n     */\n    full: PropTypes.bool,\n    /**\n     * Actions list to render in collapsed state.\n     */\n    actions: PropTypes.arrayOf(PropTypes.shape({\n      /**\n       * This is what will be displayed inside the button\n       */\n      text: PropTypes.string.isRequired,\n      /**\n       * The URL to link to when the button is clicked\n       */\n      href: PropTypes.string,\n      /**\n       * The target to link\n       */\n      target: PropTypes.string,\n      /**\n       * Disables the button if set to true\n       */\n      disabled: PropTypes.bool,\n      /**\n       * Callback function fired when the button is clicked\n       */\n      onClick: PropTypes.func,\n      /**\n       * Typography type\n       */\n      type: textTypePropType,\n      /**\n       * Typography type for tablet\n       */\n      tabletType: textTypePropType,\n      /**\n       * Typography type for mobile\n       */\n      mobileType: textTypePropType,\n      /**\n       * Component color from theme\n       */\n      color: PropTypes.string,\n      /**\n       * Component content aligment\n       */\n      align: PropTypes.oneOf(['left', 'center', 'right', 'auto']),\n      /**\n       * The CSS class name of the root element\n       */\n      className: PropTypes.string,\n    })),\n    /**\n     * If `true`, the tooltip overlay will show for opened tooltip.\n     */\n    overlay: PropTypes.bool,\n  }\n\n  static defaultProps = {\n    className: undefined,\n    actions: [],\n    bgType: 'fill',\n    color: 'primary',\n    textColor: 'white',\n    size: 'medium',\n    disabled: false,\n    overlay: false,\n    full: false,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false,\n    };\n\n    this.root = React.createRef();\n  }\n\n  componentDidMount() {\n    window.document.addEventListener('mousedown', this.onDocumentClick);\n    window.document.addEventListener('keyup', this.onKeyUp);\n  }\n\n  componentWillUnmount() {\n    window.document.removeEventListener('mousedown', this.onDocumentClick);\n    window.document.removeEventListener('keyup', this.onKeyUp);\n  }\n\n  /**\n   * onDocumentClick handler\n   * @param {SytheticEvent} e\n   */\n  onDocumentClick = (e) => {\n    const { open } = this.state;\n    const root = findDOMNode(this.root.current); // eslint-disable-line\n    const tooltipRoot = document.querySelector('[data-component=\"tooltip_popper\"]');\n    const { target } = e;\n\n    if (tooltipRoot) {\n      const isInRoot = contains(root, target);\n      const isInTooltip = contains(tooltipRoot, target);\n\n      if ((!isInRoot && !isInTooltip) && open) {\n        this.setOpen(false);\n      }\n    }\n  }\n\n  onKeyUp = (e) => {\n    const { open } = this.state;\n\n    if (e.code === 'Escape' && open) {\n      this.setOpen(false);\n    }\n  }\n\n  /**\n   * onActionClick handler\n   * @param {function} handler\n   * @param {SyntheticEvent} event\n   */\n  onClickAction(event, handler) {\n    if (handler) {\n      handler(event);\n    }\n\n    this.setOpen(false);\n  }\n\n  onClickButtonSplit = () => {\n    const { open } = this.state;\n\n    this.setOpen(!open);\n  }\n\n  /**\n   * setOpen handler\n   * @param {boolean} condition\n   */\n  setOpen = (condition) => {\n    this.setState({\n      open: condition,\n    });\n  }\n\n  renderActions = () => {\n    const { actions } = this.props;\n\n    return actions.map((action) => {\n      const {\n        text,\n        onClick,\n        disabled,\n        href,\n        target,\n        ...other\n      } = action;\n\n      const Component = href\n        ? 'a'\n        : 'button';\n\n      return (\n        <Component\n          key={text}\n          onClick={e => this.onClickAction(e, onClick)}\n          href={href}\n          target={href ? target : undefined}\n          disabled={disabled}\n          className=\"button_split_action\"\n        >\n          <Typography\n            type=\"b2\"\n            {...other}\n          >\n            {text}\n          </Typography>\n        </Component>\n      );\n    });\n  }\n\n  renderTooltip = () => {\n    const { open } = this.state;\n    const { actions, disabled } = this.props;\n\n    if (!actions.length) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <Button\n          componentRef={this.root}\n          onClick={this.onClickButtonSplit}\n          className=\"button_split\"\n          disabled={disabled}\n        >\n          <SelectArrowIcon\n            className=\"button_split_action_icon\"\n          />\n        </Button>\n        <TooltipPopper\n          placement=\"bottom-end\"\n          color=\"white\"\n          classNameTooltip=\"button_split_tooltip\"\n          classNameTooltipContent=\"button_split_tooltip_content\"\n          open={open}\n          referenceElement={this.root.current || {}}\n          positionFixed\n          usePortal\n          preventOverflow={false}\n        >\n          {this.renderActions()}\n        </TooltipPopper>\n      </React.Fragment>\n    );\n  }\n\n  renderOverlay = () => {\n    const { overlay } = this.props;\n    const { open } = this.state;\n\n    if (overlay) {\n      return (\n        <Portal>\n          <div\n            data-open={open}\n            className={classnames(\n              'tooltip_overlay',\n              'fill_black',\n            )}\n            style={{\n              opacity: open ? 0.3 : 0,\n            }}\n          />\n        </Portal>\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      actions,\n      children,\n      overlay,\n      className,\n      bgType,\n      color,\n      textColor,\n      size,\n      disabled,\n      full,\n      ...other\n    } = this.props;\n\n    return (\n      <ButtonGroup\n        className={className}\n        bgType={bgType}\n        color={color}\n        textColor={textColor}\n        size={size}\n        disabled={disabled}\n        full={full}\n      >\n        <Button\n          {...other}\n        >\n          {children}\n        </Button>\n        {this.renderTooltip()}\n        {this.renderOverlay()}\n      </ButtonGroup>\n    );\n  }\n}\n"]}