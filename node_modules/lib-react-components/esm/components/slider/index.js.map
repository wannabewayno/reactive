{"version":3,"sources":["../../../src/components/slider/index.jsx"],"names":["React","PureComponent","PropTypes","classNames","withAnalytics","minMaxPropType","props","propName","componentName","rest","error","number","min","max","errorMsg","Error","valueInRangePropType","value","Slider","state","dragging","trackNode","dragRunning","handleMouseDown","event","disabled","onMouseDown","position","clientX","getTrackOffset","setValueFromPosition","document","addEventListener","handleDragMouseMove","handleMouseEnd","onDragStart","onDragUpdate","removeEventListener","onDragStop","handleTouchStart","onTouchStart","touches","handleTouchMove","handleTouchEnd","preventDefault","defaultValue","_value","undefined","setState","resolveValue","nextProps","type","requestAnimationFrame","source","getBoundingClientRect","left","step","onChange","positionMax","clientWidth","Math","round","parseFloat","toFixed","name","required","valueProp","className","tabIndex","color","iconColor","progressColor","inputProps","other","percent","getPercent","node","width","isNaN","propTypes","bool","string","func","oneOfType","object","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withAnalytics from '../../containers/analytics_hoc';\n\n/**\n * Verifies min/max range.\n * @param {object} props\n * @param {string} propName\n * @param {string} componentName\n * @returns {object}\n */\nfunction minMaxPropType(props, propName, componentName, ...rest) {\n  const error = PropTypes.number(props, propName, componentName, ...rest);\n\n  if (error !== null) {\n    return error;\n  }\n\n  if (props.min >= props.max) {\n    const errorMsg = (propName === 'min') ? 'min should be less than max' : 'max should be greater than min';\n\n    return new Error(errorMsg);\n  }\n\n  return null;\n}\n\n/**\n * Verifies value is within the min/max range.\n * @param {object} props\n * @param {string} propName\n * @param {string} componentName\n * @returns {object}\n */\nfunction valueInRangePropType(props, propName, componentName, ...rest) {\n  const error = PropTypes.number(props, propName, componentName, ...rest);\n\n  if (error !== null) {\n    return error;\n  }\n\n  const value = props[propName];\n\n  if (value < props.min || props.max < value) {\n    return new Error(`${propName} should be within the range specified by min and max`);\n  }\n\n  return null;\n}\n\n/**\n * Slider component\n */\nclass Slider extends PureComponent {\n  static propTypes = {\n    /**\n     * The default value of the slider\n     */\n    defaultValue: valueInRangePropType,\n    /**\n     * If true, the slider will not be interactable\n     */\n    disabled: PropTypes.bool,\n    /**\n     * The maximum value the slider can slide to on a scale from 0 to 1 inclusive.\n     * Cannot be equal to min\n     */\n    max: minMaxPropType,\n    /**\n     * The minimum value the slider can slide to on a scale from 0 to 1 inclusive.\n     * Cannot be equal to max\n     */\n    min: minMaxPropType,\n    /**\n     * The name of the slider. Behaves like the name attribute of an input element\n     */\n    name: PropTypes.string,\n    /**\n     * Callback function that is fired when the slider's value changed\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback function that is fired when the slider has begun to move\n     */\n    onDragStart: PropTypes.func,\n    /**\n     * Callback function that is fired when the slider has stopped moving\n     */\n    onDragStop: PropTypes.func,\n    /**\n     * Callback function that is fired when the slider mouse down\n     */\n    onMouseDown: PropTypes.func,\n    /**\n     * Callback function that is fired when the slider touch start\n     */\n    onTouchStart: PropTypes.func,\n    /**\n     * Whether or not the slider is required in a form\n     */\n    required: PropTypes.bool,\n    /**\n     * The granularity the slider can step through values\n     */\n    step: PropTypes.number,\n    /**\n     * The value of the slider\n     */\n    value: valueInRangePropType,\n    /**\n     * The css class name of the root element\n     */\n    className: PropTypes.string,\n    /**\n     * The tabIndex attribute for slider\n     */\n    tabIndex: PropTypes.number,\n    /**\n     * Component color from theme\n     */\n    color: PropTypes.string,\n    /**\n     * Component icon color from theme\n     */\n    iconColor: PropTypes.string,\n    /**\n     * Component progress color from theme\n     */\n    progressColor: PropTypes.string,\n    /**\n     * Properties for `<input type=\"hidden\" />` element\n     */\n    inputProps: PropTypes.oneOfType([\n      PropTypes.object,\n    ]),\n  };\n\n  static defaultProps = {\n    defaultValue: 0,\n    disabled: false,\n    max: 1,\n    min: 0,\n    name: undefined,\n    onChange() {},\n    onDragStart() {},\n    onDragStop() {},\n    onMouseDown() {},\n    onTouchStart() {},\n    required: false,\n    step: 0.01,\n    value: undefined,\n    className: '',\n    tabIndex: 0,\n    color: 'light_grey',\n    iconColor: 'primary',\n    progressColor: '',\n    inputProps: {},\n  };\n\n  state = {\n    dragging: false,\n    value: 0,\n  };\n\n  componentWillMount() {\n    const {\n      value,\n      defaultValue,\n      min,\n    } = this.props;\n\n    let _value = value;\n\n    if (_value === undefined) {\n      _value = defaultValue !== undefined ? defaultValue : min;\n    }\n\n    this.setState({\n      value: this.resolveValue(_value),\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { dragging } = this.state;\n\n    if (nextProps.value !== undefined && !dragging) {\n      this.setState({\n        value: this.resolveValue(nextProps.value),\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousemove', this.handleDragMouseMove);\n    document.removeEventListener('mouseup', this.handleMouseEnd);\n\n    document.removeEventListener('touchmove', this.handleTouchMove);\n    document.removeEventListener('touchup', this.handleTouchEnd);\n    document.removeEventListener('touchend', this.handleTouchEnd);\n    document.removeEventListener('touchcancel', this.handleTouchEnd);\n  }\n\n  /**\n   * Handler onDragStart\n   * @param {SynteticEvent} event\n   */\n  onDragStart(event) {\n    const { onDragStart } = this.props;\n\n    this.setState({\n      dragging: true,\n    });\n\n    if (onDragStart) {\n      onDragStart(event);\n    }\n  }\n\n  /**\n   * Handler onDragUpdate\n   * @param {SynteticEvent} event\n   * @param {string} type\n   */\n  onDragUpdate(event, type) {\n    const { disabled } = this.props;\n\n    if (this.dragRunning) {\n      return;\n    }\n\n    this.dragRunning = true;\n\n    requestAnimationFrame(() => {\n      this.dragRunning = false;\n      const source = type === 'touch' ? event.touches[0] : event;\n      const position = source.clientX - this.getTrackOffset();\n\n      if (!disabled) {\n        this.setValueFromPosition(event, position);\n      }\n    });\n  }\n\n  /**\n   * Handler onDragStop\n   * @param {SynteticEvent} event\n   */\n  onDragStop(event) {\n    const { onDragStop } = this.props;\n\n    this.setState({\n      dragging: false,\n    });\n\n    if (onDragStop) {\n      onDragStop(event);\n    }\n  }\n\n  /**\n   * Calculate percent from value\n   * @param {number} value\n   * @param {number} min\n   * @param {number} max\n   * @returns {number}\n   */\n  static getPercent(value, min, max) {\n    let percent = (value - min) / (max - min);\n\n    if (isNaN(percent)) {\n      percent = 0;\n    }\n\n    return percent;\n  }\n\n  /**\n   * Get track offset left\n   * @returns {Number}\n   */\n  getTrackOffset() {\n    return this.trackNode.getBoundingClientRect().left;\n  }\n\n  /**\n   * Prepare position value and set to state value\n   * @param {SynteticEvent} event\n   * @param {number} position\n   */\n  setValueFromPosition(event, position) {\n    const {\n      step,\n      min,\n      max,\n      onChange,\n    } = this.props;\n\n    const positionMax = this.trackNode.clientWidth;\n\n    let value;\n\n    if (position <= 0) {\n      value = min;\n    } else if (position >= positionMax) {\n      value = max;\n    } else {\n      value = (position / positionMax) * (max - min) + min;\n      value = Math.round(value / step) * step;\n      value = parseFloat(value.toFixed(5));\n    }\n\n    value = this.resolveValue(value);\n\n    if (this.state.value !== value) {\n      this.setState({\n        value,\n      });\n\n      if (onChange) {\n        onChange(event, value);\n      }\n    }\n  }\n\n  trackNode = null;\n  dragRunning = false;\n\n  /**\n   * Compare value with min/max props\n   * @param {number} value\n   * @returns {number}\n   */\n  resolveValue(value) {\n    const { max, min } = this.props;\n\n    if (value > max) {\n      return max;\n    }\n\n    if (value < min) {\n      return min;\n    }\n\n    return value;\n  }\n\n  /**\n   * Handler onMouseDown\n   * @param {SynteticEvent} event\n   */\n  handleMouseDown = (event) => {\n    const { disabled, onMouseDown } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    const position = event.clientX - this.getTrackOffset();\n\n    this.setValueFromPosition(event, position);\n\n    document.addEventListener('mousemove', this.handleDragMouseMove);\n    document.addEventListener('mouseup', this.handleMouseEnd);\n\n    this.onDragStart(event);\n\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n  };\n\n  /**\n   * Handler onDragMouseMove\n   * @param {SynteticEvent} event\n   */\n  handleDragMouseMove = (event) => {\n    this.onDragUpdate(event, 'mouse');\n  };\n\n  /**\n   * Handler onMouseEnd\n   * @param {SynteticEvent} event\n   */\n  handleMouseEnd = (event) => {\n    document.removeEventListener('mousemove', this.handleDragMouseMove);\n    document.removeEventListener('mouseup', this.handleMouseEnd);\n\n    this.onDragStop(event);\n  };\n\n  /**\n   * Handler onTouchStart\n   * @param {SynteticEvent} event\n   */\n  handleTouchStart = (event) => {\n    const { disabled, onTouchStart } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    const position = event.touches[0].clientX - this.getTrackOffset();\n\n    this.setValueFromPosition(event, position);\n\n    document.addEventListener('touchmove', this.handleTouchMove);\n    document.addEventListener('touchup', this.handleTouchEnd);\n    document.addEventListener('touchend', this.handleTouchEnd);\n    document.addEventListener('touchcancel', this.handleTouchEnd);\n\n    this.onDragStart(event);\n\n    // Cancel scroll and context menu\n    event.preventDefault();\n\n    if (onTouchStart) {\n      onTouchStart(event);\n    }\n  };\n\n  /**\n   * Handler onTouchMove\n   * @param {SynteticEvent} event\n   */\n  handleTouchMove = (event) => {\n    this.onDragUpdate(event, 'touch');\n  };\n\n  /**\n   * Handler onTouchEnd\n   * @param {SynteticEvent} event\n   */\n  handleTouchEnd = (event) => {\n    document.removeEventListener('touchmove', this.handleTouchMove);\n    document.removeEventListener('touchup', this.handleTouchEnd);\n    document.removeEventListener('touchend', this.handleTouchEnd);\n    document.removeEventListener('touchcancel', this.handleTouchEnd);\n\n    this.onDragStop(event);\n  };\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const {\n      defaultValue,\n      disabled,\n      max,\n      min,\n      name,\n      onChange,\n      onDragStart,\n      onDragStop,\n      onMouseDown,\n      onTouchStart,\n      required,\n      step,\n      value: valueProp,\n      className,\n      tabIndex,\n      color,\n      iconColor,\n      progressColor,\n      inputProps,\n      ...other\n    } = this.props;\n    const { value } = this.state;\n    const percent = Slider.getPercent(value, min, max) * 100;\n\n    return (\n      <div\n        data-component=\"slider\"\n        data-disabled={disabled}\n        tabIndex={tabIndex}\n        className={classNames(\n          'slider',\n          className,\n        )}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}\n        {...other}\n      >\n        <div\n          ref={(node) => { this.trackNode = node; }}\n          className={classNames(\n            'slider_track',\n            [`fill_${color}`],\n          )}\n        />\n        <div\n          className={classNames(\n            'slider_progress',\n            [`fill_${progressColor || color}`],\n          )}\n          style={{\n            width: `${percent}%`,\n          }}\n          data-component=\"slider-progress\"\n        />\n        <div\n          className={classNames(\n            'slider_tab',\n            [`fill_${iconColor}`],\n          )}\n          style={{\n            left: `${percent}%`,\n          }}\n        />\n        <input\n          {...inputProps}\n          type=\"hidden\"\n          name={name}\n          value={value}\n          required={required}\n          min={min}\n          max={max}\n          step={step}\n          disabled={disabled}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withAnalytics(Slider, 'onDragStop');\n"]}