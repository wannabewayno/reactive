var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'react';
import PropTypes from 'prop-types';

/**
 * OfflineProvider component
 */

var OfflineProvider = function (_Component) {
  _inherits(OfflineProvider, _Component);

  function OfflineProvider() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, OfflineProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OfflineProvider.__proto__ || Object.getPrototypeOf(OfflineProvider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      online: navigator.onLine
    }, _this.bindedOnChange = _this.onChange.bind(_this), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(OfflineProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        online: this.state.online
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('online', this.bindedOnChange);
      window.addEventListener('offline', this.bindedOnChange);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('online', this.bindedOnChange);
      window.removeEventListener('offline', this.bindedOnChange);
    }

    /**
     * onChange connection handler
     */

  }, {
    key: 'onChange',
    value: function onChange() {
      this.setState({
        online: navigator.onLine
      });
    }
  }, {
    key: 'render',


    /**
     * render
     * @return {ReactElement} markup
     */

    value: function render() {
      return this.props.children;
    }
  }]);

  return OfflineProvider;
}(Component);

OfflineProvider.propTypes = {
  /**
   * This is what will be displayed inside the OfflineProvider
   */
  children: PropTypes.node
};
OfflineProvider.childContextTypes = {
  online: PropTypes.bool
};
OfflineProvider.defaultProps = {
  children: null
};
export default OfflineProvider;
//# sourceMappingURL=index.js.map