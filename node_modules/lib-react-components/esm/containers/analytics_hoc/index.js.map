{"version":3,"sources":["../../../src/containers/analytics_hoc/index.jsx"],"names":["React","PropTypes","withAnalytics","Component","firingEventProp","AnalyticsWrapper","context","forwardRef","gaEventName","props","oldProp","fireEvent","gaFireEvent","WrappedComponent","ref","name","contextTypes","func","propTypes","oneOfType","shape","current","any","string","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA;;;AAGA,eAAe,SAASC,aAAT,CAAuBC,SAAvB,EAA+D;AAAA,MAA7BC,eAA6B,uEAAX,SAAW;;AAC5E,MAAMC,mBAAmB,SAAnBA,gBAAmB,OAAwCC,OAAxC,EAAoD;AAAA,QAAjDC,UAAiD,QAAjDA,UAAiD;AAAA,QAArCC,WAAqC,QAArCA,WAAqC;AAAA,QAArBC,KAAqB;;AAC3E,QAAMC,UAAUD,MAAML,eAAN,CAAhB;AACA,QAAMO,YAAY,SAAZA,SAAY,GAAa;AAC7B,UAAIL,QAAQM,WAAR,IAAuBJ,WAA3B,EAAwC;AACtCF,gBAAQM,WAAR,CAAoBJ,WAApB;AACD;;AAED,UAAI,OAAOE,OAAP,KAAmB,UAAvB,EAAmC;AACjCA;AACD;AACF,KARD;;AAUA,WACE,oBAAC,SAAD,eACMD,KADN,sBAESL,eAFT,EAE2BO,SAF3B;AAGE,WAAKJ;AAHP,OADF;AAOD,GAnBD;;AAqBA,MAAMM,mBAAmBb,MAAMO,UAAN,CAAiB,UAACE,KAAD,EAAQK,GAAR;AAAA,WACxC,oBAAC,gBAAD,eAAsBL,KAAtB,IAA6B,YAAYK,GAAzC,IADwC;AAAA,GAAjB,CAAzB;;AAIAD,mBAAiBE,IAAjB,GAAwBZ,UAAUY,IAAlC;AACAV,mBAAiBW,YAAjB,GAAgC;AAC9BJ,iBAAaX,UAAUgB;AADO,GAAhC;AAGAZ,mBAAiBa,SAAjB,GAA6B;AAC3BX,gBAAYN,UAAUkB,SAAV,CAAoB,CAC9BlB,UAAUgB,IADoB,EAE9BhB,UAAUmB,KAAV,CAAgB,EAAEC,SAASpB,UAAUqB,GAArB,EAAhB,CAF8B,CAApB,CADe;AAK3Bd,iBAAaP,UAAUsB;AALI,GAA7B;AAOAlB,mBAAiBmB,YAAjB,GAAgC;AAC9BjB,gBAAY,IADkB;AAE9BC,iBAAa;AAFiB,GAAhC;;AAKA,SAAOK,gBAAP;AACD","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * AnalyticsHOC\n */\nexport default function withAnalytics(Component, firingEventProp = 'onClick') {\n  const AnalyticsWrapper = ({ forwardRef, gaEventName, ...props }, context) => {\n    const oldProp = props[firingEventProp];\n    const fireEvent = (...args) => {\n      if (context.gaFireEvent && gaEventName) {\n        context.gaFireEvent(gaEventName);\n      }\n\n      if (typeof oldProp === 'function') {\n        oldProp(...args);\n      }\n    };\n\n    return (\n      <Component\n        {...props}\n        {...{ [firingEventProp]: fireEvent }}\n        ref={forwardRef}\n      />\n    );\n  };\n\n  const WrappedComponent = React.forwardRef((props, ref) => (\n    <AnalyticsWrapper {...props} forwardRef={ref} />\n  ));\n\n  WrappedComponent.name = Component.name;\n  AnalyticsWrapper.contextTypes = {\n    gaFireEvent: PropTypes.func,\n  };\n  AnalyticsWrapper.propTypes = {\n    forwardRef: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.shape({ current: PropTypes.any }),\n    ]),\n    gaEventName: PropTypes.string,\n  };\n  AnalyticsWrapper.defaultProps = {\n    forwardRef: null,\n    gaEventName: '',\n  };\n\n  return WrappedComponent;\n}\n"]}