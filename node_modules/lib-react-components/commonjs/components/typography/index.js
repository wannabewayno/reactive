'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.textTypePropType = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Typography;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var textTypePropType = exports.textTypePropType = _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'b1', 'b2', 'b3', 'c1', '']), _propTypes2.default.string]);

/**
 * Typography component
 */
function Typography(props, context) {
  var children = props.children,
      propsType = props.type,
      color = props.color,
      align = props.align,
      tabletType = props.tabletType,
      mobileType = props.mobileType,
      className = props.className,
      other = _objectWithoutProperties(props, ['children', 'type', 'color', 'align', 'tabletType', 'mobileType', 'className']);

  var device = context.device;

  var type = propsType || 'c1';

  if (device) {
    if (mobileType && device.type === 'mobile') {
      type = mobileType;
    }

    if (tabletType && device.type === 'tablet') {
      type = tabletType;
    }
  }

  var basicClassNames = (0, _classnames2.default)('break_word', ['text_' + color], _defineProperty({}, 'text_' + align, align !== 'auto'), className);
  var Component = /h[1-6]/.test(type) ? type : 'p';

  return _react2.default.createElement(
    Component,
    _extends({}, other, {
      'data-component': 'typography',
      'data-classnamemobile': mobileType ? (0, _classnames2.default)(basicClassNames, mobileType) : null,
      'data-classnametablet': tabletType ? (0, _classnames2.default)(basicClassNames, tabletType) : null,
      'data-classnamedesktop': mobileType || tabletType ? basicClassNames : null,
      className: (0, _classnames2.default)(basicClassNames, type)
    }),
    children
  );
}

Typography.propTypes = {
  /**
   * This is what will be displayed inside the button
   */
  children: _propTypes2.default.node.isRequired,
  /**
   * Typography type
   */
  type: textTypePropType,
  /**
   * Typography type for tablet
   */
  tabletType: textTypePropType,
  /**
   * Typography type for mobile
   */
  mobileType: textTypePropType,
  /**
   * Component color from theme
   */
  color: _propTypes2.default.string,
  /**
   * Component content aligment
   */
  align: _propTypes2.default.oneOf(['left', 'center', 'right', 'auto']),
  /**
   * The CSS class name of the root element
   */
  className: _propTypes2.default.string
};

Typography.contextTypes = {
  device: _propTypes2.default.object
};

Typography.defaultProps = {
  type: 'b1',
  color: 'black',
  align: 'left',
  className: '',
  tabletType: '',
  mobileType: ''
};
//# sourceMappingURL=index.js.map