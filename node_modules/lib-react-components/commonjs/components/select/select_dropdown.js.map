{"version":3,"sources":["../../../src/components/select/select_dropdown.jsx"],"names":["SelectDropdown","dropdownNode","querySelector","focusedElement","getFocusedElement","scrollTop","offsetTop","props","children","className","bgType","color","colorFocus","other","node","PureComponent","propTypes","PropTypes","string","oneOf","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;AAEA;;;IAGqBA,c;;;;;;;;;;;;;;sMA0CnBC,Y,GAAe,I;;;;;;;AARf;;;;wCAIoB;AAClB,aAAO,KAAKA,YAAL,CAAkBC,aAAlB,CAAgC,yBAAhC,CAAP;AACD;;;;;AAID;;;6CAGyB;AACvB,UAAMC,iBAAiB,KAAKC,iBAAL,EAAvB;;AAEA,UAAID,cAAJ,EAAoB;AAClB,aAAKF,YAAL,CAAkBI,SAAlB,GAA8BF,eAAeG,SAA7C;AACD;AACF;;AAED;;;;;;;6BAIS;AAAA;AAAA;;AAAA,mBAQH,KAAKC,KARF;AAAA,UAELC,QAFK,UAELA,QAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILC,MAJK,UAILA,MAJK;AAAA,UAKLC,KALK,UAKLA,KALK;AAAA,UAMLC,UANK,UAMLA,UANK;AAAA,UAOFC,KAPE;;AAUP,aACE;AAAA;AAAA;AACE,4BAAe,iBADjB;AAEE,qBAAW,0BACT,iBADS,EAET,aAAWD,UAAX,CAFS,4DAIED,KAJF,EAIYD,WAAW,MAJvB,8CAKKA,WAAW,QALhB,iBAOT,aAPS,EAQTD,SARS,CAFb;AAYE,eAAK,aAACK,IAAD,EAAU;AAAE,mBAAKb,YAAL,GAAoBa,IAApB;AAA2B;AAZ9C,WAaMD,KAbN;AAeGL;AAfH,OADF;AAmBD;;;;EAxFyCO,oB;;AAAvBf,c,CACZgB,S,GAAY;AACjB;;;AAGAR,YAAUS,oBAAUH,IAJH;AAKjB;;;AAGAL,aAAWQ,oBAAUC,MARJ;AASjB;;;;;AAKAR,UAAQO,oBAAUE,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,CAAhB,CAdS;AAejB;;;AAGAR,SAAOM,oBAAUC,MAlBA;AAmBjB;;;AAGAN,cAAYK,oBAAUC;AAtBL,C;AADAlB,c,CA0BZoB,Y,GAAe;AACpBZ,YAAU,IADU;AAEpBC,aAAW,EAFS;AAGpBC,UAAQ,MAHY;AAIpBC,SAAO,YAJa;AAKpBC,cAAY;AALQ,C;kBA1BHZ,c","file":"select_dropdown.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n/**\n * SelectDropdown component\n */\nexport default class SelectDropdown extends PureComponent {\n  static propTypes = {\n    /**\n     * This is what will be displayed inside the dropdown list\n     */\n    children: PropTypes.node,\n    /**\n     * The CSS class name of the root element\n     */\n    className: PropTypes.string,\n    /**\n     * Component type one of `fill` or `stroke`.\n     * If `fill` - component will be have background-color from `color` props.\n     * If `stroke` - component will be have border-color from `color` props.\n     */\n    bgType: PropTypes.oneOf(['fill', 'stroke']),\n    /**\n     * Component color from theme\n     */\n    color: PropTypes.string,\n    /**\n     * Component focus color from theme\n     */\n    colorFocus: PropTypes.string,\n  };\n\n  static defaultProps = {\n    children: null,\n    className: '',\n    bgType: 'fill',\n    color: 'light_grey',\n    colorFocus: 'primary',\n  };\n\n  /**\n   * Get focused element from root element\n   * @returns {object|null}\n   */\n  getFocusedElement() {\n    return this.dropdownNode.querySelector('[data-has-focus=\"true\"]');\n  }\n\n  dropdownNode = null;\n\n  /**\n   * Scroll root element to focused element\n   */\n  scrollToFocusedElement() {\n    const focusedElement = this.getFocusedElement();\n\n    if (focusedElement) {\n      this.dropdownNode.scrollTop = focusedElement.offsetTop;\n    }\n  }\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const {\n      children,\n      className,\n      bgType,\n      color,\n      colorFocus,\n      ...other\n    } = this.props;\n\n    return (\n      <div\n        data-component=\"select_dropdown\"\n        className={classNames(\n          'select_dropdown',\n          [`stroke_${colorFocus}`],\n          {\n            [`fill_${color}`]: bgType === 'fill',\n            fill_white: bgType === 'stroke',\n          },\n          'round_small',\n          className,\n        )}\n        ref={(node) => { this.dropdownNode = node; }}\n        {...other}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n"]}