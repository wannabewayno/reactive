'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = SelectItem;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * SelectItem component
 */
function SelectItem(props) {
  var _classNames;

  var children = props.children,
      value = props.value,
      selected = props.selected,
      disabled = props.disabled,
      hasFocus = props.hasFocus,
      className = props.className,
      textColor = props.textColor,
      colorFocus = props.colorFocus,
      size = props.size,
      other = _objectWithoutProperties(props, ['children', 'value', 'selected', 'disabled', 'hasFocus', 'className', 'textColor', 'colorFocus', 'size']);

  return _react2.default.createElement(
    'div',
    _extends({
      'data-component': 'select_item',
      'data-disabled': disabled,
      'data-selected': selected,
      'data-has-focus': hasFocus,
      'data-value': value,
      className: (0, _classnames2.default)('select_item', 'truncate_text', ['select_item_' + size], (_classNames = {}, _defineProperty(_classNames, 'select_item_focus_' + colorFocus, hasFocus), _defineProperty(_classNames, 'text_' + textColor, !selected), _classNames), _defineProperty({}, 'text_' + colorFocus, selected), className)
    }, other),
    children
  );
}

SelectItem.propTypes = {
  children: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.node]).isRequired,
  value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
  selected: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  hasFocus: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  /**
   * Component text color from theme
   */
  textColor: _propTypes2.default.string,
  /**
   * Component focus color from theme
   */
  colorFocus: _propTypes2.default.string,
  /**
   * Component size
   */
  size: _propTypes2.default.oneOf(['medium', 'large'])
};

SelectItem.defaultProps = {
  selected: false,
  disabled: false,
  hasFocus: false,
  className: '',
  textColor: 'black',
  colorFocus: 'primary',
  size: 'medium'
};
//# sourceMappingURL=select_item.js.map