'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * SelectDropdown component
 */
var SelectDropdown = function (_PureComponent) {
  _inherits(SelectDropdown, _PureComponent);

  function SelectDropdown() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SelectDropdown);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SelectDropdown.__proto__ || Object.getPrototypeOf(SelectDropdown)).call.apply(_ref, [this].concat(args))), _this), _this.dropdownNode = null, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SelectDropdown, [{
    key: 'getFocusedElement',


    /**
     * Get focused element from root element
     * @returns {object|null}
     */
    value: function getFocusedElement() {
      return this.dropdownNode.querySelector('[data-has-focus="true"]');
    }
  }, {
    key: 'scrollToFocusedElement',


    /**
     * Scroll root element to focused element
     */
    value: function scrollToFocusedElement() {
      var focusedElement = this.getFocusedElement();

      if (focusedElement) {
        this.dropdownNode.scrollTop = focusedElement.offsetTop;
      }
    }

    /**
     * render
     * @return {ReactElement} markup
     */

  }, {
    key: 'render',
    value: function render() {
      var _classNames,
          _this2 = this;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          bgType = _props.bgType,
          color = _props.color,
          colorFocus = _props.colorFocus,
          other = _objectWithoutProperties(_props, ['children', 'className', 'bgType', 'color', 'colorFocus']);

      return _react2.default.createElement(
        'div',
        _extends({
          'data-component': 'select_dropdown',
          className: (0, _classnames2.default)('select_dropdown', ['stroke_' + colorFocus], (_classNames = {}, _defineProperty(_classNames, 'fill_' + color, bgType === 'fill'), _defineProperty(_classNames, 'fill_white', bgType === 'stroke'), _classNames), 'round_small', className),
          ref: function ref(node) {
            _this2.dropdownNode = node;
          }
        }, other),
        children
      );
    }
  }]);

  return SelectDropdown;
}(_react.PureComponent);

SelectDropdown.propTypes = {
  /**
   * This is what will be displayed inside the dropdown list
   */
  children: _propTypes2.default.node,
  /**
   * The CSS class name of the root element
   */
  className: _propTypes2.default.string,
  /**
   * Component type one of `fill` or `stroke`.
   * If `fill` - component will be have background-color from `color` props.
   * If `stroke` - component will be have border-color from `color` props.
   */
  bgType: _propTypes2.default.oneOf(['fill', 'stroke']),
  /**
   * Component color from theme
   */
  color: _propTypes2.default.string,
  /**
   * Component focus color from theme
   */
  colorFocus: _propTypes2.default.string
};
SelectDropdown.defaultProps = {
  children: null,
  className: '',
  bgType: 'fill',
  color: 'light_grey',
  colorFocus: 'primary'
};
exports.default = SelectDropdown;
//# sourceMappingURL=select_dropdown.js.map