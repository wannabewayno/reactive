{"version":3,"sources":["../../../src/components/button/index.jsx"],"names":["Button","props","disabled","href","bgType","color","align","textColor","size","className","component","children","componentRef","full","other","componentProps","Object","assign","toClassName","isLink","Component","options","React","propTypes","PropTypes","oneOf","string","node","isRequired","onClick","func","bool","oneOfType","shape","current","any","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport withAnalytics from '../../containers/analytics_hoc';\n\n/**\n * Button component\n */\nclass Button extends React.Component {\n  /**\n   * Construct class name for the root element using options from props\n   * @param {{\n   *  align: 'left' | 'center' | 'right';\n   *  size: 'small' | 'medium' | 'large';\n   *  textColor: string;\n   *  color: string;\n   *  bgType: 'fill' | 'stroke';\n   *  className: string;\n   *  full: boolean;\n   * }} options\n   * @return {string}\n   */\n  static toClassName(options) {\n    return classnames(\n      'button',\n      'round_small',\n      'truncate_text',\n      'break_word',\n      [`text_${options.align}`],\n      [`button_${options.size}`],\n      [`button_text_${options.textColor}`],\n      {\n        [`fill_${options.color}`]: options.bgType === 'fill',\n        [`stroke_${options.color}`]: options.bgType === 'stroke',\n        [`text_${options.textColor}`]: options.textColor,\n        button_full: options.full,\n      },\n      options.className,\n    );\n  }\n\n  static propTypes = {\n    /**\n     * Component type one of `fill` or `stroke`.\n     * If `fill` - component will have background and border from `color` props.\n     * If `stroke` - component will have border from `color` props and transparent background.\n     * If `clear` - component will have transparent border and transparent background.\n     */\n    bgType: PropTypes.oneOf(['fill', 'stroke', 'clear']),\n    /**\n     * Component color from theme\n     */\n    color: PropTypes.string,\n    /**\n     * Component content aligment\n     */\n    align: PropTypes.oneOf(['left', 'center', 'right']),\n    /**\n     * Component text color from theme\n     */\n    textColor: PropTypes.string,\n    /**\n     * Component size\n     */\n    size: PropTypes.oneOf(['small', 'medium', 'large']),\n    /**\n     * The URL to link to when the button is clicked\n     */\n    href: PropTypes.string,\n    /**\n     * This is what will be displayed inside the button\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * Callback function fired when the button is clicked\n     */\n    onClick: PropTypes.func,\n    /**\n     * Disables the button if set to true\n     */\n    disabled: PropTypes.bool,\n    /**\n     * The CSS class name of the root element\n     */\n    className: PropTypes.string,\n    /**\n     * The function component for render custom element\n     */\n    component: PropTypes.func,\n    /**\n     * Component ref.\n     */\n    componentRef: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.shape({ current: PropTypes.any }),\n    ]),\n    /**\n     * Component full-width.\n     */\n    full: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    bgType: 'fill',\n    color: 'primary',\n    align: 'center',\n    textColor: 'white',\n    size: 'medium',\n    href: undefined,\n    onClick: null,\n    disabled: false,\n    className: '',\n    component: undefined,\n    componentRef: undefined,\n    full: false,\n  };\n\n  /**\n   * If component is link\n   * @return {boolean}\n   */\n  isLink() {\n    const { disabled, href } = this.props;\n\n    return href && !disabled;\n  }\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const {\n      bgType,\n      color,\n      align,\n      textColor,\n      size,\n      href,\n      className,\n      component,\n      children,\n      componentRef,\n      full,\n      ...other\n    } = this.props;\n\n    const componentProps = Object.assign({\n      'data-component': 'button',\n      'data-type': bgType,\n      className: Button.toClassName(this.props),\n      children: (\n        <span>\n          {children}\n        </span>\n      ),\n    }, other);\n\n    if (component) {\n      return component(componentProps);\n    }\n\n    const isLink = this.isLink();\n    const Component = isLink ? 'a' : 'button';\n\n    return (\n      <Component\n        ref={componentRef}\n        href={isLink ? href : null}\n        {...componentProps}\n      />\n    );\n  }\n}\n\nexport default withAnalytics(Button, 'onClick');\n"]}