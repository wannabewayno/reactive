'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = LinearProgress;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * LinearProgress component
 */
function LinearProgress(props) {
  var value = props.value,
      color = props.color,
      colorProgress = props.colorProgress,
      className = props.className,
      other = _objectWithoutProperties(props, ['value', 'color', 'colorProgress', 'className']);

  /**
   * @return {ReactElement} markup
   */


  return _react2.default.createElement(
    'div',
    _extends({
      'data-component': 'linear-progress',
      className: (0, _classnames2.default)('linear_progress', 'round_small', ['fill_' + color], className)
    }, other),
    _react2.default.createElement('div', {
      className: (0, _classnames2.default)('linear_progress_value', 'round_small', ['fill_' + colorProgress]),
      style: {
        width: value + '%'
      }
    })
  );
}

/**
 * Verifies value is within the min/max range.
 * @param {object} props
 * @param {string} propName
 * @param {string} componentName
 * @returns {object}
 */
function valueInRangePropType(props, propName, componentName) {
  for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  var error = _propTypes2.default.number.apply(_propTypes2.default, [props, propName, componentName].concat(rest));

  if (error !== null) {
    return error;
  }

  var value = props[propName];

  if (value < 0 || value > 100) {
    return new Error(propName + ' should be within the range specified by 0 and 100');
  }

  return null;
}

LinearProgress.propTypes = {
  /**
   * Progress line color from theme
   */
  color: _propTypes2.default.string,
  /**
   * Background line color from theme
   */
  colorProgress: _propTypes2.default.string,
  /**
   * Current progress value
   */
  value: valueInRangePropType,
  /**
   * The CSS class name of the root element
   */
  className: _propTypes2.default.string
};

LinearProgress.defaultProps = {
  color: 'light_grey',
  colorProgress: 'primary',
  value: 0,
  className: ''
};
//# sourceMappingURL=linear_progress.js.map