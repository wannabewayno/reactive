{"version":3,"sources":["../../../src/components/progress/linear_progress.jsx"],"names":["LinearProgress","props","value","color","colorProgress","className","other","width","valueInRangePropType","propName","componentName","rest","error","PropTypes","number","Error","propTypes","string","defaultProps"],"mappings":";;;;;;;;kBAOwBA,c;;AAPxB;;;;AACA;;;;AACA;;;;;;;;AAEA;;;AAGe,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAAA,MAE1CC,KAF0C,GAOxCD,KAPwC,CAE1CC,KAF0C;AAAA,MAG1CC,KAH0C,GAOxCF,KAPwC,CAG1CE,KAH0C;AAAA,MAI1CC,aAJ0C,GAOxCH,KAPwC,CAI1CG,aAJ0C;AAAA,MAK1CC,SAL0C,GAOxCJ,KAPwC,CAK1CI,SAL0C;AAAA,MAMvCC,KANuC,4BAOxCL,KAPwC;;AAS5C;;;;;AAGA,SACE;AAAA;AAAA;AACE,wBAAe,iBADjB;AAEE,iBAAW,0BACT,iBADS,EAET,aAFS,EAGT,WAASE,KAAT,CAHS,EAITE,SAJS;AAFb,OAQMC,KARN;AAUE;AACE,iBAAW,0BACT,uBADS,EAET,aAFS,EAGT,WAASF,aAAT,CAHS,CADb;AAME,aAAO;AACLG,eAAUL,KAAV;AADK;AANT;AAVF,GADF;AAuBD;;AAED;;;;;;;AAOA,SAASM,oBAAT,CAA8BP,KAA9B,EAAqCQ,QAArC,EAA+CC,aAA/C,EAAuE;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AACrE,MAAMC,QAAQC,oBAAUC,MAAV,6BAAiBb,KAAjB,EAAwBQ,QAAxB,EAAkCC,aAAlC,SAAoDC,IAApD,EAAd;;AAEA,MAAIC,UAAU,IAAd,EAAoB;AAClB,WAAOA,KAAP;AACD;;AAED,MAAMV,QAAQD,MAAMQ,QAAN,CAAd;;AAEA,MAAIP,QAAQ,CAAR,IAAaA,QAAQ,GAAzB,EAA8B;AAC5B,WAAO,IAAIa,KAAJ,CAAaN,QAAb,wDAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAEDT,eAAegB,SAAf,GAA2B;AACzB;;;AAGAb,SAAOU,oBAAUI,MAJQ;AAKzB;;;AAGAb,iBAAeS,oBAAUI,MARA;AASzB;;;AAGAf,SAAOM,oBAZkB;AAazB;;;AAGAH,aAAWQ,oBAAUI;AAhBI,CAA3B;;AAmBAjB,eAAekB,YAAf,GAA8B;AAC5Bf,SAAO,YADqB;AAE5BC,iBAAe,SAFa;AAG5BF,SAAO,CAHqB;AAI5BG,aAAW;AAJiB,CAA9B","file":"linear_progress.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n/**\n * LinearProgress component\n */\nexport default function LinearProgress(props) {\n  const {\n    value,\n    color,\n    colorProgress,\n    className,\n    ...other\n  } = props;\n\n  /**\n   * @return {ReactElement} markup\n   */\n  return (\n    <div\n      data-component=\"linear-progress\"\n      className={classNames(\n        'linear_progress',\n        'round_small',\n        [`fill_${color}`],\n        className,\n      )}\n      {...other}\n    >\n      <div\n        className={classNames(\n          'linear_progress_value',\n          'round_small',\n          [`fill_${colorProgress}`],\n        )}\n        style={{\n          width: `${value}%`,\n        }}\n      />\n    </div>\n  );\n}\n\n/**\n * Verifies value is within the min/max range.\n * @param {object} props\n * @param {string} propName\n * @param {string} componentName\n * @returns {object}\n */\nfunction valueInRangePropType(props, propName, componentName, ...rest) {\n  const error = PropTypes.number(props, propName, componentName, ...rest);\n\n  if (error !== null) {\n    return error;\n  }\n\n  const value = props[propName];\n\n  if (value < 0 || value > 100) {\n    return new Error(`${propName} should be within the range specified by 0 and 100`);\n  }\n\n  return null;\n}\n\nLinearProgress.propTypes = {\n  /**\n   * Progress line color from theme\n   */\n  color: PropTypes.string,\n  /**\n   * Background line color from theme\n   */\n  colorProgress: PropTypes.string,\n  /**\n   * Current progress value\n   */\n  value: valueInRangePropType,\n  /**\n   * The CSS class name of the root element\n   */\n  className: PropTypes.string,\n};\n\nLinearProgress.defaultProps = {\n  color: 'light_grey',\n  colorProgress: 'primary',\n  value: 0,\n  className: '',\n};\n"]}