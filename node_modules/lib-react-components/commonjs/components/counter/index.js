'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _analytics_hoc = require('../../containers/analytics_hoc');

var _analytics_hoc2 = _interopRequireDefault(_analytics_hoc);

var _input = require('../text_field/input');

var _input2 = _interopRequireDefault(_input);

var _counter_arrow = require('../icons/counter_arrow');

var _counter_arrow2 = _interopRequireDefault(_counter_arrow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function prepareValue(value, defaultValue) {
  if (value || typeof value === 'number') {
    return value;
  }

  if (defaultValue || typeof defaultValue === 'number') {
    return defaultValue;
  }

  return '';
}

var Counter = function (_React$Component) {
  _inherits(Counter, _React$Component);

  function Counter(props) {
    _classCallCheck(this, Counter);

    var _this = _possibleConstructorReturn(this, (Counter.__proto__ || Object.getPrototypeOf(Counter)).call(this, props));

    _this.onKeyDown = function (e) {
      if (e.keyCode === 38) {
        e.preventDefault();
        _this.onChange(1);
      }

      if (e.keyCode === 40) {
        e.preventDefault();
        _this.onChange(-1);
      }
    };

    var value = props.value,
        defaultValue = props.defaultValue;


    _this.state = {
      value: prepareValue(value, defaultValue)
    };
    return _this;
  }

  _createClass(Counter, [{
    key: 'onChange',
    value: function onChange(add) {
      var _props = this.props,
          minValue = _props.minValue,
          maxValue = _props.maxValue,
          onChange = _props.onChange;
      var value = this.state.value;

      var newSize = value + add;

      if (minValue <= newSize && newSize <= maxValue) {
        this.setState({ value: newSize });
        onChange(newSize);

        return;
      }

      if (newSize < minValue) {
        this.setState({ value: maxValue });
        onChange(newSize);

        return;
      }

      this.setState({ value: minValue });
      onChange(newSize);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var value = this.state.value;
      var _props2 = this.props,
          bgType = _props2.bgType,
          color = _props2.color,
          textColor = _props2.textColor,
          colorFocus = _props2.colorFocus,
          minValue = _props2.minValue,
          minValuePlaceholder = _props2.minValuePlaceholder,
          maxValue = _props2.maxValue,
          maxValuePlaceholder = _props2.maxValuePlaceholder,
          disabled = _props2.disabled,
          inputProps = _props2.inputProps,
          counterProps = _props2.counterProps;


      var inputValue = value;

      if (minValue === value && minValuePlaceholder) {
        inputValue = minValuePlaceholder;
      }

      if (maxValue === value && maxValuePlaceholder) {
        inputValue = maxValuePlaceholder;
      }

      return _react2.default.createElement(
        _input2.default,
        _extends({
          bgType: bgType,
          color: color,
          textColor: textColor,
          colorFocus: colorFocus,
          value: inputValue,
          disabled: disabled,
          onKeyDown: this.onKeyDown,
          onClick: function onClick() {
            return _this2.onChange(1);
          },
          name: 'counter',
          inputProps: _extends({
            readOnly: true,
            className: 'counter'
          }, inputProps)
        }, counterProps),
        _react2.default.createElement(_counter_arrow2.default, {
          className: 'counter_triangle',
          onClick: function onClick() {
            return _this2.onChange(1);
          },
          'data-id': 'increase-triangle'
        }),
        _react2.default.createElement(_counter_arrow2.default, {
          className: 'counter_triangle',
          onClick: function onClick(e) {
            e.stopPropagation();
            _this2.onChange(-1);
          },
          'data-id': 'decrease-triangle'
        })
      );
    }
  }]);

  return Counter;
}(_react2.default.Component);

Counter.propTypes = {
  value: _propTypes2.default.number,
  defaultValue: _propTypes2.default.number,
  minValue: _propTypes2.default.number,
  maxValue: _propTypes2.default.number,
  onChange: _propTypes2.default.func,
  minValuePlaceholder: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  maxValuePlaceholder: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  disabled: _propTypes2.default.bool,
  bgType: _propTypes2.default.oneOf(['fill', 'stroke']),
  color: _propTypes2.default.string,
  textColor: _propTypes2.default.string,
  colorFocus: _propTypes2.default.string,
  inputProps: _propTypes2.default.oneOfType([_propTypes2.default.object]),
  counterProps: _propTypes2.default.oneOfType([_propTypes2.default.object])
};
Counter.defaultProps = {
  value: undefined,
  defaultValue: 0,
  minValue: undefined,
  maxValue: undefined,
  onChange: function onChange() {},

  minValuePlaceholder: undefined,
  maxValuePlaceholder: undefined,
  disabled: false,
  bgType: 'fill',
  color: 'light_grey',
  textColor: 'black',
  inputProps: {},
  counterProps: {},
  colorFocus: 'primary'
};
exports.default = (0, _analytics_hoc2.default)(Counter, 'onChange');
//# sourceMappingURL=index.js.map