'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Snackbar component
 */
var Snackbar = function (_PureComponent) {
  _inherits(Snackbar, _PureComponent);

  function Snackbar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Snackbar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Snackbar.__proto__ || Object.getPrototypeOf(Snackbar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      open: false,
      exiting: true
    }, _this.timerAutoHide = null, _this.rootNode = null, _this._handleMouseEnter = function (event) {
      var onMouseEnter = _this.props.onMouseEnter;


      if (onMouseEnter) {
        onMouseEnter(event);
      }

      _this._handlePause();
    }, _this._handleMouseLeave = function (event) {
      var onMouseLeave = _this.props.onMouseLeave;


      if (onMouseLeave) {
        onMouseLeave(event);
      }

      _this._handleResume();
    }, _this._handlePause = function () {
      clearTimeout(_this.timerAutoHide);
    }, _this._handleResume = function () {
      var autoHideDuration = _this.props.autoHideDuration;


      if (autoHideDuration) {
        _this._setAutoHideTimer((autoHideDuration || 0) * 0.5);
      }
    }, _this._handleTransitionEnd = function (e) {
      e.preventDefault();

      var open = _this.state.open;


      if (e.target === e.currentTarget && !open) {
        _this.setState({
          exiting: true
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Snackbar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var open = this.props.open;


      if (open) {
        this._setAutoHideTimer();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      var open = this.props.open;


      if (prevProps.open !== open) {
        if (open) {
          this.setState({ // eslint-disable-line
            exiting: false
          }, function () {
            setTimeout(function () {
              _this2.setState({
                open: true
              });
            }, 10);
          });

          this._setAutoHideTimer();
        } else {
          clearTimeout(this.timerAutoHide);

          this.setState({ // eslint-disable-line
            open: false
          });
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearTimeout(this.timerAutoHide);
    }

    /**
     * Set timer for fire onClose callback
     * @param {number} duration
     */

  }, {
    key: '_setAutoHideTimer',
    value: function _setAutoHideTimer() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var _props = this.props,
          onClose = _props.onClose,
          autoHideDuration = _props.autoHideDuration;


      if (!onClose || !autoHideDuration) {
        return;
      }

      clearTimeout(this.timerAutoHide);

      this.timerAutoHide = setTimeout(function () {
        if (!onClose || !autoHideDuration) {
          return;
        }

        onClose(null, 'timeout');
      }, duration || autoHideDuration || 0);
    }

    /**
     * Handler for onMouseEnter event
     */


    /**
     * Handler for onMouseLeave event
     */


    /**
     * Stop auto hide timer
     */


    /**
     * Start auto hide timer
     */


    /**
     * Handler for onTransitionEnd event
     */

  }, {
    key: 'render',


    /**
     * render
     * @return {ReactElement} markup
     */
    value: function render() {
      var _props2 = this.props,
          autoHideDuration = _props2.autoHideDuration,
          children = _props2.children,
          className = _props2.className,
          onClose = _props2.onClose,
          onMouseLeave = _props2.onMouseLeave,
          onMouseEnter = _props2.onMouseEnter,
          openProp = _props2.open,
          fullWidth = _props2.fullWidth,
          verticalPosition = _props2.verticalPosition,
          horizontalPosition = _props2.horizontalPosition,
          action = _props2.action,
          color = _props2.color,
          textColor = _props2.textColor,
          other = _objectWithoutProperties(_props2, ['autoHideDuration', 'children', 'className', 'onClose', 'onMouseLeave', 'onMouseEnter', 'open', 'fullWidth', 'verticalPosition', 'horizontalPosition', 'action', 'color', 'textColor']);

      var _state = this.state,
          exiting = _state.exiting,
          open = _state.open;


      if (exiting) {
        return null;
      }

      return _react2.default.createElement(
        'div',
        _extends({
          'data-component': 'snackbar',
          className: (0, _classnames2.default)('snackbar', ['snackbar_vertical_position_' + verticalPosition], ['snackbar_horizontal_position_' + horizontalPosition], {
            snackbar_full_width: fullWidth
          }, className),
          onMouseEnter: this._handleMouseEnter,
          onMouseLeave: this._handleMouseLeave
        }, other),
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)('snackbar_container', {
              snackbar_open: open
            }, ['fill_' + color]),
            onTransitionEnd: this._handleTransitionEnd
          },
          _react2.default.createElement(
            'div',
            {
              className: (0, _classnames2.default)('snackbar_content', 'break_word', ['text_' + textColor])
            },
            children
          ),
          action && _react2.default.createElement(
            'div',
            { className: 'snackbar_action' },
            action
          )
        )
      );
    }
  }]);

  return Snackbar;
}(_react.PureComponent);

Snackbar.propTypes = {
  /**
   * The number of milliseconds to wait before automatically calling
   * the onClose function. onClose should then set the state of
   * the open prop to hide the Snackbar. This behavior is disabled by
   * default with the null value.
   */
  autoHideDuration: _propTypes2.default.number,
  /**
   * This is what will be displayed inside the Snackbar.
   */
  children: _propTypes2.default.node.isRequired,
  /**
   * The CSS class name of the root element.
   */
  className: _propTypes2.default.string,
  /**
   * Callback fired when the component requests to be closed.
   */
  onClose: _propTypes2.default.func,
  /**
   * Callback function fired when the component mouse leave.
   */
  onMouseLeave: _propTypes2.default.func,
  /**
   * Callback function fired when the component mouse enter.
   */
  onMouseEnter: _propTypes2.default.func,
  /**
   * If true, Snackbar is open.
   */
  open: _propTypes2.default.bool,
  /**
   * If true, Snackbar has `width: 100%`.
   */
  fullWidth: _propTypes2.default.bool,
  /**
   * Vertical position for Snackbar.
   */
  verticalPosition: _propTypes2.default.oneOf(['top', 'bottom']),
  /**
   * Horizontal position for Snackbar.
   */
  horizontalPosition: _propTypes2.default.oneOf(['left', 'center', 'right']),
  /**
   * The action to display.
   */
  action: _propTypes2.default.node,
  /**
   * Component color from theme.
   */
  color: _propTypes2.default.string,
  /**
   * Component text color from theme.
   */
  textColor: _propTypes2.default.string
};
Snackbar.defaultProps = {
  autoHideDuration: undefined,
  className: undefined,
  onClose: function onClose() {},
  onMouseLeave: function onMouseLeave() {},
  onMouseEnter: function onMouseEnter() {},

  open: false,
  fullWidth: true,
  verticalPosition: 'bottom',
  horizontalPosition: 'left',
  action: null,
  color: 'black',
  textColor: 'white'
};
exports.default = Snackbar;
//# sourceMappingURL=index.js.map