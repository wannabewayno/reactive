'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = ButtonGroup;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * ButtonGroup component
 */
function ButtonGroup(props) {
  var className = props.className,
      children = props.children,
      bgType = props.bgType,
      color = props.color,
      textColor = props.textColor,
      size = props.size,
      disabled = props.disabled,
      full = props.full,
      other = _objectWithoutProperties(props, ['className', 'children', 'bgType', 'color', 'textColor', 'size', 'disabled', 'full']);

  return _react2.default.createElement(
    'div',
    _extends({}, other, {
      'data-component': 'button_group',
      className: (0, _classnames2.default)('button_group', {
        button_group_full: full
      }, className)
    }),
    _react2.default.Children.map(children, function (child) {
      if (!_react2.default.isValidElement(child)) {
        return null;
      }

      return _react2.default.cloneElement(child, {
        disabled: child.props.disabled || disabled,
        textColor: child.props.textColor || textColor,
        bgType: bgType,
        color: color,
        size: size,
        full: full
      });
    })
  );
}

ButtonGroup.propTypes = {
  /**
   * Component type one of `fill` or `stroke`.
   * If `fill` - component will have background and border from `color` props.
   * If `stroke` - component will have border from `color` props and transparent background.
   * If `clear` - component will have transparent border and transparent background.
   */
  bgType: _propTypes2.default.oneOf(['fill', 'stroke', 'clear']),
  /**
   * Button component color from theme
   */
  color: _propTypes2.default.string,
  /**
   * Button component text color from theme
   */
  textColor: _propTypes2.default.string,
  /**
   * Button component size
   */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  /**
   * Disables the buttons if set to true
   */
  disabled: _propTypes2.default.bool,
  /**
   * This is what will be displayed inside the root element.
   */
  children: _propTypes2.default.node.isRequired,
  /**
   * The CSS class name of the root element.
   */
  className: _propTypes2.default.string,
  /**
   * Component full-width.
   */
  full: _propTypes2.default.bool
};

ButtonGroup.defaultProps = {
  className: undefined,
  bgType: 'fill',
  color: 'primary',
  textColor: 'white',
  size: 'medium',
  disabled: false,
  full: false
};
//# sourceMappingURL=index.js.map