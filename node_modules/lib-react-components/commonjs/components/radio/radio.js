'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _analytics_hoc = require('../../containers/analytics_hoc');

var _analytics_hoc2 = _interopRequireDefault(_analytics_hoc);

var _typography = require('../typography');

var _typography2 = _interopRequireDefault(_typography);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Radio component
 */
var Radio = function (_PureComponent) {
  _inherits(Radio, _PureComponent);

  function Radio() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Radio);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Radio.__proto__ || Object.getPrototypeOf(Radio)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (e) {
      var onChange = _this.props.onChange;


      onChange(e, e.target.value);
    }, _this.onKeyUp = function (e) {
      var keyCode = e.keyCode;

      if (keyCode === 13) {
        _this.onChange(e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  /**
   * onChange handler
   * @param {SytheticEvent} e
   */


  /**
   * onKeyUp handler
   * @param {SytheticEvent} e
   */


  _createClass(Radio, [{
    key: 'renderLabel',


    /**
     * renderLabel
     * @return {ReactElement} markup
     */
    value: function renderLabel() {
      var _props = this.props,
          label = _props.label,
          labelPosition = _props.labelPosition,
          labelProps = _props.labelProps;


      return label && _react2.default.createElement(
        _typography2.default,
        _extends({
          type: 'b2',
          color: 'black',
          className: 'radio_label',
          'data-position': labelPosition
        }, labelProps),
        label
      );
    }

    /**
     * render
     * @return {ReactElement} markup
     */

  }, {
    key: 'render',
    value: function render() {
      var _classNames, _classNames2;

      var _props2 = this.props,
          checked = _props2.checked,
          disabled = _props2.disabled,
          name = _props2.name,
          value = _props2.value,
          onChange = _props2.onChange,
          inputProps = _props2.inputProps,
          label = _props2.label,
          labelPosition = _props2.labelPosition,
          labelProps = _props2.labelProps,
          className = _props2.className,
          tabIndex = _props2.tabIndex,
          bgType = _props2.bgType,
          color = _props2.color,
          colorOn = _props2.colorOn,
          iconColor = _props2.iconColor,
          iconColorOn = _props2.iconColorOn,
          other = _objectWithoutProperties(_props2, ['checked', 'disabled', 'name', 'value', 'onChange', 'inputProps', 'label', 'labelPosition', 'labelProps', 'className', 'tabIndex', 'bgType', 'color', 'colorOn', 'iconColor', 'iconColorOn']);

      return _react2.default.createElement(
        'div',
        _extends({
          'data-component': 'radio',
          'data-type': bgType,
          'data-checked': checked,
          'data-disabled': disabled,
          className: (0, _classnames2.default)('radio', className)
        }, other),
        _react2.default.createElement('input', _extends({}, inputProps, {
          tabIndex: tabIndex,
          type: 'radio',
          name: name,
          value: value,
          className: 'radio_input',
          onChange: this.onChange,
          onKeyUp: this.onKeyUp,
          disabled: disabled,
          checked: checked
        })),
        labelPosition === 'left' ? this.renderLabel() : null,
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)('radio_container', (_classNames = {}, _defineProperty(_classNames, 'stroke_' + colorOn, checked), _defineProperty(_classNames, 'fill_' + colorOn, checked), _classNames), (_classNames2 = {}, _defineProperty(_classNames2, 'stroke_' + color, !checked), _defineProperty(_classNames2, 'fill_' + color, !checked), _classNames2)),
            'data-component': 'radio_container'
          },
          _react2.default.createElement('div', {
            className: (0, _classnames2.default)('radio_tumbler', _defineProperty({}, 'fill_' + iconColor, !checked), _defineProperty({}, 'fill_' + iconColorOn, checked))
          })
        ),
        labelPosition === 'right' ? this.renderLabel() : null
      );
    }
  }]);

  return Radio;
}(_react.PureComponent);

Radio.propTypes = {
  /**
   * If true, the component is checked
   */
  checked: _propTypes2.default.bool,
  /**
   * If true, the component will be disabled
   */
  disabled: _propTypes2.default.bool,
  /**
   * Name attribute for component
   */
  name: _propTypes2.default.string,
  /**
   * The value of the component
   */
  value: _propTypes2.default.string,
  /**
   * Callback fired when the state is changed
   */
  onChange: _propTypes2.default.func,
  /**
   * Properties for `<input type="radio" />` element
   */
  inputProps: _propTypes2.default.oneOfType([_propTypes2.default.object]),
  /**
   * Label for radio
   */
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /**
   * Where the label will be placed next to the radio
   */
  labelPosition: _propTypes2.default.oneOf(['left', 'right']),
  /**
   * `Typography` props for label
   */
  labelProps: _propTypes2.default.object, // eslint-disable-line
  /**
   * The CSS class name of the root element
   */
  className: _propTypes2.default.string,
  /**
   * The tabIndex of the root element
   */
  tabIndex: _propTypes2.default.number,
  /**
   * Component type one of `fill` or `stroke`.
   * If `fill` - component will be have background-color from `color` props.
   * If `stroke` - component will be have border-color from `color` props.
   */
  bgType: _propTypes2.default.oneOf(['fill', 'stroke']),
  /**
   * Component color from theme
   */
  color: _propTypes2.default.string,
  /**
   * Component checked color from theme
   */
  colorOn: _propTypes2.default.string,
  /**
   * Component icon color from theme
   */
  iconColor: _propTypes2.default.string,
  /**
   * Component checked icon color from theme
   */
  iconColorOn: _propTypes2.default.string
};
Radio.defaultProps = {
  checked: false,
  disabled: false,
  name: undefined,
  value: undefined,
  onChange: function onChange() {},

  inputProps: {},
  label: undefined,
  labelPosition: 'left',
  labelProps: {},
  className: '',
  tabIndex: 0,
  bgType: 'fill',
  color: 'light_grey',
  colorOn: 'primary',
  iconColor: 'grey',
  iconColorOn: 'white'
};
exports.default = (0, _analytics_hoc2.default)(Radio, 'onChange');
//# sourceMappingURL=radio.js.map