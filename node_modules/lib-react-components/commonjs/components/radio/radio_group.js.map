{"version":3,"sources":["../../../src/components/radio/radio_group.jsx"],"names":["RadioGroup","props","handleRadioChange","e","val","value","onChange","setState","valueState","state","defaultValue","nextProps","children","name","other","Children","map","child","index","key","checked","PureComponent","propTypes","PropTypes","node","isRequired","string","func","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;IAGMA,U;;;AAgCJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAAA,UAuBnBC,iBAvBmB,GAuBC,UAACC,CAAD,EAAIC,GAAJ,EAAY;AAAA,wBACF,MAAKH,KADH;AAAA,UACtBI,KADsB,eACtBA,KADsB;AAAA,UACfC,QADe,eACfA,QADe;;;AAG9B,UAAIA,QAAJ,EAAcA,SAASH,CAAT,EAAYC,GAAZ;;AAEd,UAAI,CAACC,KAAL,EAAY;AACV,cAAKE,QAAL,CAAc;AACZC,sBAAYJ;AADA,SAAd;AAGD;AACF,KAjCkB;;AAGjB,UAAKK,KAAL,GAAa;AACXD,kBAAYP,MAAMI,KAAN,IAAeJ,MAAMS;AADtB,KAAb;AAHiB;AAMlB;;;;8CAEyBC,S,EAAW;AAAA,UAC3BN,KAD2B,GACjB,KAAKJ,KADY,CAC3BI,KAD2B;;;AAGnC,UAAIA,UAAUM,UAAUN,KAAxB,EAA+B;AAC7B,aAAKE,QAAL,CAAc;AACZC,sBAAYG,UAAUN;AADV,SAAd;AAGD;AACF;;AAED;;;;;;;;;;AAiBA;;;;6BAIS;AAAA;;AAAA,mBAQH,KAAKJ,KARF;AAAA,UAELW,QAFK,UAELA,QAFK;AAAA,UAGLC,IAHK,UAGLA,IAHK;AAAA,UAILH,YAJK,UAILA,YAJK;AAAA,UAKLL,KALK,UAKLA,KALK;AAAA,UAMLC,QANK,UAMLA,QANK;AAAA,UAOFQ,KAPE;;AAAA,UASCN,UATD,GASgB,KAAKC,KATrB,CASCD,UATD;;;AAWP,aACE;AAAA;AAASM,aAAT;AACGC,wBAASC,GAAT,CAAaJ,QAAb,EAAuB,UAACK,KAAD,EAAQC,KAAR,EAAkB;AACxC,cAAI,CAAC,2BAAeD,KAAf,CAAL,EAA4B;AAC1B,mBAAO,IAAP;AACD;;AAED,iBAAO,yBAAaA,KAAb,EAAoB;AACzBE,iBAAKD,KADoB;AAEzBL,sBAFyB;AAGzBO,qBAASZ,eAAeS,MAAMhB,KAAN,CAAYI,KAHX;AAIzBC,sBAAU,OAAKJ;AAJU,WAApB,CAAP;AAMD,SAXA;AADH,OADF;AAgBD;;;;EAlGsBmB,oB;;AAAnBrB,U,CACGsB,S,GAAY;AACjB;;;AAGAV,YAAUW,oBAAUC,IAAV,CAAeC,UAJR;AAKjB;;;AAGAZ,QAAMU,oBAAUG,MAAV,CAAiBD,UARN;AASjB;;;;;AAKAf,gBAAca,oBAAUG,MAdP;AAejB;;;AAGArB,SAAOkB,oBAAUG,MAlBA;AAmBjB;;;AAGApB,YAAUiB,oBAAUI;AAtBH,C;AADf3B,U,CA0BG4B,Y,GAAe;AACpBlB,gBAAc,EADM;AAEpBL,SAAO,EAFa;AAGpBC,UAHoB,sBAGT,CAAE;AAHO,C;kBA2ET,6BAAcN,UAAd,EAA0B,UAA1B,C","file":"radio_group.js","sourcesContent":["import React, { PureComponent, Children, isValidElement, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport withAnalytics from '../../containers/analytics_hoc';\n\n/**\n * RadioGroup component\n */\nclass RadioGroup extends PureComponent {\n  static propTypes = {\n    /**\n     * The content of the component\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * The name used to reference the value of the control\n     */\n    name: PropTypes.string.isRequired,\n    /**\n     * The `value` property of the radio button that will be\n     * selected by default. This takes precedence over the `checked` property\n     * of the `Radio` elements\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * Value of the selected radio button\n     */\n    value: PropTypes.string,\n    /**\n     * Change callback\n     */\n    onChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    defaultValue: '',\n    value: '',\n    onChange() {},\n  }\n\n  constructor(props) {\n    super();\n\n    this.state = {\n      valueState: props.value || props.defaultValue,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { value } = this.props;\n\n    if (value !== nextProps.value) {\n      this.setState({\n        valueState: nextProps.value,\n      });\n    }\n  }\n\n  /**\n   * Handler for radio change event\n   * @param {SytheticEvent} e\n   * @param {string} val\n   */\n  handleRadioChange = (e, val) => {\n    const { value, onChange } = this.props;\n\n    if (onChange) onChange(e, val);\n\n    if (!value) {\n      this.setState({\n        valueState: val,\n      });\n    }\n  };\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const {\n      children,\n      name,\n      defaultValue,\n      value,\n      onChange,\n      ...other\n    } = this.props;\n    const { valueState } = this.state;\n\n    return (\n      <div {...other}>\n        {Children.map(children, (child, index) => {\n          if (!isValidElement(child)) {\n            return null;\n          }\n\n          return cloneElement(child, {\n            key: index,\n            name,\n            checked: valueState === child.props.value,\n            onChange: this.handleRadioChange,\n          });\n        })}\n      </div>\n    );\n  }\n}\n\nexport default withAnalytics(RadioGroup, 'onChange');\n"]}