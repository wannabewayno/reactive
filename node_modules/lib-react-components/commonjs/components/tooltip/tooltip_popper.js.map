{"version":3,"sources":["../../../src/components/tooltip/tooltip_popper.jsx"],"names":["TooltipPopper","scheduleUpdate","renderTooltipBody","ref","style","top","left","position","placement","arrowProps","props","children","arrow","offset","color","zIndex","classNameTooltip","classNameTooltipContent","showDelay","direction","getDirection","transform","transformOrigin","animationDelay","MozAnimationDelay","WebkitAnimationDelay","referenceElement","open","placementProp","positionFixed","usePortal","preventOverflow","preventFlip","flipBoundaryElement","other","renderTooltip","computeStyle","gpuAcceleration","enabled","hide","flip","boundariesElement","Element","indexOf","React","Component","propTypes","PropTypes","node","isRequired","bool","shape","clientHeight","number","clientWidth","getBoundingClientRect","func","oneOf","string","oneOfType","instanceOf","HTMLElement","defaultProps"],"mappings":"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","file":"tooltip_popper.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Popper } from 'react-popper';\nimport RightTriangleIcon from '../icons/right_triangle';\nimport Portal from '../../containers/portal';\n\n/**\n * TooltipPopper component\n * @description\n *  All props for Popper you can found on https://github.com/FezVrasta/react-popper.\n */\nexport default class TooltipPopper extends React.Component {\n  static getDirection(placement) {\n    if (placement) {\n      if (placement.indexOf('right') === 0) {\n        return 'Left';\n      }\n      if (placement.indexOf('left') === 0) {\n        return 'Right';\n      }\n      if (placement.indexOf('bottom') === 0) {\n        return 'Top';\n      }\n      if (placement.indexOf('top') === 0) {\n        return 'Bottom';\n      }\n    }\n\n    return '';\n  }\n\n  componentWillReceiveProps() {\n    // Make schedule to update tooltip, position if button position failed\n    this.scheduleUpdate();\n  }\n\n  scheduleUpdate = () => null;\n\n  renderTooltipBody = ({\n    ref,\n    style: { top, left, position },\n    placement,\n    arrowProps,\n    scheduleUpdate,\n  }) => {\n    const {\n      children,\n      arrow,\n      offset,\n      color,\n      zIndex,\n      classNameTooltip,\n      classNameTooltipContent,\n      showDelay,\n    } = this.props;\n    const direction = TooltipPopper.getDirection(placement);\n\n    this.scheduleUpdate = scheduleUpdate;\n\n    return (\n      <div\n        ref={ref}\n        style={{\n          top: 0,\n          left: 0,\n          position,\n          transform: `translate3d(${left}px, ${top}px, 0)`,\n          transformOrigin: 'top center',\n          [`padding${direction}`]: offset,\n          zIndex,\n        }}\n        data-component=\"tooltip_popper\"\n        className={classNameTooltip}\n      >\n        <div\n          className={classnames(\n            'tooltip',\n            `fill_${color}`,\n            'shadow',\n            'round_small',\n            'break_word',\n            classNameTooltipContent,\n          )}\n          data-component=\"tooltip_content\"\n          data-placement={placement}\n          style={{\n            animationDelay: `${showDelay}ms`,\n            MozAnimationDelay: `${showDelay}ms`,\n            WebkitAnimationDelay: `${showDelay}ms`,\n          }}\n        >\n          {arrow && (\n            <div\n              ref={arrowProps.ref}\n              style={arrowProps.style}\n              data-component=\"tooltip_arrow\"\n              className=\"tooltip_arrow\"\n            >\n              <RightTriangleIcon\n                className={classnames('tooltip_arrow_icon', `fill_${color}`)}\n              />\n            </div>\n          )}\n          {children}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      referenceElement,\n      open,\n      placement: placementProp,\n      positionFixed,\n      usePortal,\n      preventOverflow,\n      preventFlip,\n      flipBoundaryElement,\n      ...other\n    } = this.props;\n\n    if (!open) {\n      return null;\n    }\n\n    const renderTooltip = (\n      <Popper\n        modifiers={{\n          computeStyle: {\n            gpuAcceleration: false,\n          },\n          preventOverflow: {\n            enabled: preventOverflow,\n          },\n          hide: {\n            enabled: preventOverflow,\n          },\n          flip: {\n            enabled: !preventFlip,\n            boundariesElement: flipBoundaryElement,\n          },\n        }}\n        placement={placementProp}\n        referenceElement={referenceElement}\n        positionFixed={positionFixed}\n        {...other}\n      >\n        {this.renderTooltipBody}\n      </Popper>\n    );\n\n    if (usePortal) {\n      return (\n        <Portal container={usePortal instanceof Element ? usePortal : null}>\n          {renderTooltip}\n        </Portal>\n      );\n    }\n\n    return renderTooltip;\n  }\n}\n\nTooltipPopper.propTypes = {\n  /**\n   * This is what will be displayed inside the popper.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * If `true`, the popper arrow is shown.\n   */\n  arrow: PropTypes.bool,\n  /**\n   * The `referenceObject` is an object that provides an interface\n   * compatible with Popper.js and lets you use it as replacement of\n   * a real DOM node.\n   */\n  referenceElement: PropTypes.shape({\n    clientHeight: PropTypes.number,\n    clientWidth: PropTypes.number,\n    getBoundingClientRect: PropTypes.func,\n  }).isRequired,\n  /**\n   * If `true`, the popper is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * Popper placement.\n   */\n  placement: PropTypes.oneOf([\n    'auto-start',\n    'auto',\n    'auto-end',\n    'top-start',\n    'top',\n    'top-end',\n    'right-start',\n    'right',\n    'right-end',\n    'bottom-end',\n    'bottom',\n    'bottom-start',\n    'left-end',\n    'left',\n    'left-start',\n  ]),\n  /**\n   * Set this to `true` if you want popper to position it self in `fixed` mode.\n   */\n  positionFixed: PropTypes.bool,\n  /**\n   * Padding from popper to `referenceElement` in `px`.\n   */\n  offset: PropTypes.number,\n  /**\n   * Color for tooltip component.\n   */\n  color: PropTypes.string,\n  /**\n   * Z-index for tooltip component.\n   */\n  zIndex: PropTypes.number,\n  /**\n   * Use React portal for render tooltip to another elemenet.\n   */\n  usePortal: PropTypes.oneOfType([PropTypes.bool, PropTypes.instanceOf(HTMLElement)]),\n  /**\n   * Use preventOverflow for prevent overflow on tooltip.\n   */\n  preventOverflow: PropTypes.bool,\n  /**\n   * Use preventFlip for prevent flipping tooltip, when no space.\n   */\n  preventFlip: PropTypes.bool,\n  /**\n   * Class name for tooltip popper root element\n   */\n  classNameTooltip: PropTypes.string,\n  /**\n   * Class name for tooltip popper content element\n   */\n  classNameTooltipContent: PropTypes.string,\n  /**\n   * The number of milliseconds to wait before showing the tooltip.\n   */\n  showDelay: PropTypes.number,\n  /**\n   * Flip boundary element modifier\n   */\n  flipBoundaryElement: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(HTMLElement)]),\n};\n\nTooltipPopper.defaultProps = {\n  arrow: true,\n  open: false,\n  placement: 'auto',\n  positionFixed: true,\n  offset: 10,\n  color: 'white',\n  zIndex: 1,\n  usePortal: false,\n  preventOverflow: true,\n  preventFlip: false,\n  classNameTooltip: '',\n  classNameTooltipContent: '',\n  showDelay: 0,\n  flipBoundaryElement: 'viewport',\n};\n"]}