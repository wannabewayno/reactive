'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = withAnalytics;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * AnalyticsHOC
 */
function withAnalytics(Component) {
  var firingEventProp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'onClick';

  var AnalyticsWrapper = function AnalyticsWrapper(_ref, context) {
    var forwardRef = _ref.forwardRef,
        gaEventName = _ref.gaEventName,
        props = _objectWithoutProperties(_ref, ['forwardRef', 'gaEventName']);

    var oldProp = props[firingEventProp];
    var fireEvent = function fireEvent() {
      if (context.gaFireEvent && gaEventName) {
        context.gaFireEvent(gaEventName);
      }

      if (typeof oldProp === 'function') {
        oldProp.apply(undefined, arguments);
      }
    };

    return _react2.default.createElement(Component, _extends({}, props, _defineProperty({}, firingEventProp, fireEvent), {
      ref: forwardRef
    }));
  };

  var WrappedComponent = _react2.default.forwardRef(function (props, ref) {
    return _react2.default.createElement(AnalyticsWrapper, _extends({}, props, { forwardRef: ref }));
  });

  WrappedComponent.name = Component.name;
  AnalyticsWrapper.contextTypes = {
    gaFireEvent: _propTypes2.default.func
  };
  AnalyticsWrapper.propTypes = {
    forwardRef: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.shape({ current: _propTypes2.default.any })]),
    gaEventName: _propTypes2.default.string
  };
  AnalyticsWrapper.defaultProps = {
    forwardRef: null,
    gaEventName: ''
  };

  return WrappedComponent;
}
//# sourceMappingURL=index.js.map