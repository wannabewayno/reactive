{"version":3,"sources":["../../../src/utils/validator/validator.js"],"names":["validator","error","type","console","isRealDate","year","month","day","d","Date","getFullYear","getMonth","getDate","validateByType","value","regExps","splited","split","test","Number","types","ignoreStartAndEndSpaces","Array","isArray","preparedValue","trim","i","length"],"mappings":";;;;;kBA0EwBA,S;;AA1ExB;;;;;;AAEA;;;;;AAKA,SAASC,KAAT,CAAeC,IAAf,EAAqB;AACnBC,UAAQF,KAAR,aAAuBC,IAAvB;;AAEA,SAAO,KAAP;AACD;;AAED;;;;;;;AAOA,SAASE,UAAT,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,GAAjC,EAAsC;AACpC,MAAMC,IAAI,IAAIC,IAAJ,CAASJ,IAAT,EAAeC,QAAQ,CAAvB,EAA0BC,GAA1B,CAAV;;AAEA,SACEC,EAAEE,WAAF,OAAoBL,IAApB,IACAG,EAAEG,QAAF,OAAiBL,QAAQ,CADzB,IAEAE,EAAEI,OAAF,OAAgBL,GAHlB;AAKD;;AAED;;;;;;AAMA,SAASM,cAAT,CAAwBC,KAAxB,EAA+BZ,IAA/B,EAAqC;AACnC,MAAI,CAACA,IAAL,EAAW;AACT,WAAOD,MAAMC,IAAN,CAAP;AACD;;AAED,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAOA,KAAKY,KAAL,CAAP;AACD;;AAED,MAAI,CAACC,mBAAQb,IAAR,CAAL,EAAoB;AAClB,WAAOD,MAAMC,IAAN,CAAP;AACD;;AAED,UAAQA,IAAR;AACE,SAAK,MAAL;AAAa;AACX,YAAI,OAAOY,KAAP,KAAiB,QAArB,EAA+B;AAC7B,iBAAO,KAAP;AACD;AACD,YAAME,UAAUF,MAAMG,KAAN,CAAY,GAAZ,CAAhB;;AAEA,eACEF,mBAAQb,IAAR,EAAcgB,IAAd,CAAmBJ,KAAnB,KACAV,WAAWe,OAAOH,QAAQ,CAAR,CAAP,CAAX,EAA+BG,OAAOH,QAAQ,CAAR,CAAP,CAA/B,EAAmDG,OAAOH,QAAQ,CAAR,CAAP,CAAnD,CAFF;AAID;;AAED;AACE,aAAOD,mBAAQb,IAAR,EAAcgB,IAAd,CAAmBJ,KAAnB,CAAP;AAdJ;AAgBD;;AAED;;;;;;;AAOe,SAASd,SAAT,CAAmBc,KAAnB,EAA0BM,KAA1B,EAAiCC,uBAAjC,EAA0D;AACvE,MAAI,CAACC,MAAMC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzBjB,YAAQF,KAAR,CAAc,yCAAd;;AAEA,WAAO,KAAP;AACD;;AAED,MAAMuB,gBAAgBH,0BAA0BP,MAAMW,IAAN,EAA1B,GAAyCX,KAA/D;;AAEA,OAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIN,MAAMO,MAA1B,EAAkCD,KAAK,CAAvC,EAA0C;AACxC,QAAI,CAACb,eAAeW,aAAf,EAA8BJ,MAAMM,CAAN,CAA9B,CAAL,EAA8C;AAC5C,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","file":"validator.js","sourcesContent":["import regExps from './reg_exps';\n\n/**\n * Show 'console.error'\n * @param {*} type - Type name, will be show in error text\n * @returns {boolean}\n */\nfunction error(type) {\n  console.error(`Type '${type}' not found`);\n\n  return false;\n}\n\n/**\n * Check on date is real\n * @param {number} year - Year value\n * @param {number} month - Mouth value\n * @param {number} day - Day value\n * @returns {boolean}\n */\nfunction isRealDate(year, month, day) {\n  const d = new Date(year, month - 1, day);\n\n  return (\n    d.getFullYear() === year &&\n    d.getMonth() === month - 1 &&\n    d.getDate() === day\n  );\n}\n\n/**\n * Checking the value of the mask\n * @param {string|number} value - Value for check\n * @param {string|function} type - Mask type\n * @returns {boolean}\n */\nfunction validateByType(value, type) {\n  if (!type) {\n    return error(type);\n  }\n\n  if (typeof type === 'function') {\n    return type(value);\n  }\n\n  if (!regExps[type]) {\n    return error(type);\n  }\n\n  switch (type) {\n    case 'date': {\n      if (typeof value !== 'string') {\n        return false;\n      }\n      const splited = value.split('-');\n\n      return (\n        regExps[type].test(value) &&\n        isRealDate(Number(splited[0]), Number(splited[1]), Number(splited[2]))\n      );\n    }\n\n    default:\n      return regExps[type].test(value);\n  }\n}\n\n/**\n *\n * @param {string|number} value - Value for check\n * @param {array<string|function>} types - Mask types\n * @param {boolean} ignoreStartAndEndSpaces - Trim value spaces\n * @returns {boolean}\n */\nexport default function validator(value, types, ignoreStartAndEndSpaces) {\n  if (!Array.isArray(types)) {\n    console.error('Argument \\'types\\' must be an \\'array\\'');\n\n    return false;\n  }\n\n  const preparedValue = ignoreStartAndEndSpaces ? value.trim() : value;\n\n  for (let i = 0; i < types.length; i += 1) {\n    if (!validateByType(preparedValue, types[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"]}